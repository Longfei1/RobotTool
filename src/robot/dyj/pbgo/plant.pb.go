// protoc --proto_path=./pb --go_out=./pbgo --go_opt=paths=source_relative ./pb/plant.proto
// protoc-go-inject-tag -input="./pbgo/plant.pb.go"
// goctl model mongo -e -dir ./model -t PlantInfoList --home template -c
//!!!!!!! 删除生成的worldtypes, 代码成替换成model对象

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.0--rc1
// source: plant.proto

package pbgo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlantOperaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"globalItemId"
	BuffGlobalItemId uint32 `protobuf:"varint,1,opt,name=buffGlobalItemId,proto3" json:"buffGlobalItemId,omitempty"` //! buff等id
	// @inject_tag: bson:"startTime"
	StartTime uint32 `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"` //! 生效时间
	// @inject_tag: bson:"endTime"
	EndTime uint32 `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"`
	// @inject_tag: bson:"operaBaseValue"
	OperaBaseValue uint32 `protobuf:"varint,4,opt,name=operaBaseValue,proto3" json:"operaBaseValue,omitempty"` //! 如果是0就不用管，如果有值，就是宠物属性计算后的operaValue
}

func (x *PlantOperaInfo) Reset() {
	*x = PlantOperaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plant_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantOperaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantOperaInfo) ProtoMessage() {}

func (x *PlantOperaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plant_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantOperaInfo.ProtoReflect.Descriptor instead.
func (*PlantOperaInfo) Descriptor() ([]byte, []int) {
	return file_plant_proto_rawDescGZIP(), []int{0}
}

func (x *PlantOperaInfo) GetBuffGlobalItemId() uint32 {
	if x != nil {
		return x.BuffGlobalItemId
	}
	return 0
}

func (x *PlantOperaInfo) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PlantOperaInfo) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *PlantOperaInfo) GetOperaBaseValue() uint32 {
	if x != nil {
		return x.OperaBaseValue
	}
	return 0
}

type PlantInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"plantUid"
	PlantUid string `protobuf:"bytes,1,opt,name=plantUid,proto3" json:"plantUid,omitempty"`
	// @inject_tag: bson:"buildUid"
	BuildUid string `protobuf:"bytes,2,opt,name=buildUid,proto3" json:"buildUid,omitempty"` //! 依附的建唯一id, 比如农田的唯一id
	// @inject_tag: bson:"buildGlobalItemId"
	BuildGlobalItemId uint32 `protobuf:"varint,3,opt,name=buildGlobalItemId,proto3" json:"buildGlobalItemId,omitempty"` //! 依附建筑的全局id，方便查他的生长速度等
	// @inject_tag: bson:"globalItemId"
	GlobalItemId uint32 `protobuf:"varint,4,opt,name=globalItemId,proto3" json:"globalItemId,omitempty"` //! 植物的全局id
	// @inject_tag: bson:"startTime"
	StartTime uint32 `protobuf:"varint,5,opt,name=startTime,proto3" json:"startTime,omitempty"` //! 生效时间
	// @inject_tag: bson:"plantOperaList"
	PlantOperaList []*PlantOperaInfo `protobuf:"bytes,6,rep,name=plantOperaList,proto3" json:"plantOperaList,omitempty"`
	// @inject_tag: bson:"pruneTimes"
	PruneTimes []uint32 `protobuf:"varint,7,rep,packed,name=pruneTimes,proto3" json:"pruneTimes,omitempty"` //! 剪枝 两个状态可以剪
}

func (x *PlantInfo) Reset() {
	*x = PlantInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plant_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantInfo) ProtoMessage() {}

func (x *PlantInfo) ProtoReflect() protoreflect.Message {
	mi := &file_plant_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantInfo.ProtoReflect.Descriptor instead.
func (*PlantInfo) Descriptor() ([]byte, []int) {
	return file_plant_proto_rawDescGZIP(), []int{1}
}

func (x *PlantInfo) GetPlantUid() string {
	if x != nil {
		return x.PlantUid
	}
	return ""
}

func (x *PlantInfo) GetBuildUid() string {
	if x != nil {
		return x.BuildUid
	}
	return ""
}

func (x *PlantInfo) GetBuildGlobalItemId() uint32 {
	if x != nil {
		return x.BuildGlobalItemId
	}
	return 0
}

func (x *PlantInfo) GetGlobalItemId() uint32 {
	if x != nil {
		return x.GlobalItemId
	}
	return 0
}

func (x *PlantInfo) GetStartTime() uint32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *PlantInfo) GetPlantOperaList() []*PlantOperaInfo {
	if x != nil {
		return x.PlantOperaList
	}
	return nil
}

func (x *PlantInfo) GetPruneTimes() []uint32 {
	if x != nil {
		return x.PruneTimes
	}
	return nil
}

type PlantInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id"
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// @inject_tag: bson:"plantList"
	PlantList []*PlantInfo `protobuf:"bytes,2,rep,name=plantList,proto3" json:"plantList,omitempty"`
	// @inject_tag: bson:"seq"
	Seq uint64 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *PlantInfoList) Reset() {
	*x = PlantInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plant_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlantInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlantInfoList) ProtoMessage() {}

func (x *PlantInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_plant_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlantInfoList.ProtoReflect.Descriptor instead.
func (*PlantInfoList) Descriptor() ([]byte, []int) {
	return file_plant_proto_rawDescGZIP(), []int{2}
}

func (x *PlantInfoList) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *PlantInfoList) GetPlantList() []*PlantInfo {
	if x != nil {
		return x.PlantList
	}
	return nil
}

func (x *PlantInfoList) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

var File_plant_proto protoreflect.FileDescriptor

var file_plant_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x75, 0x66, 0x66, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x62, 0x75, 0x66, 0x66, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x42, 0x61, 0x73, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x42, 0x61, 0x73, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x09, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x55, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x70, 0x6c, 0x61,
	0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x75, 0x6e,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x70, 0x72,
	0x75, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x63, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x09, 0x70, 0x6c, 0x61, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73,
	0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x42, 0x0d, 0x5a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plant_proto_rawDescOnce sync.Once
	file_plant_proto_rawDescData = file_plant_proto_rawDesc
)

func file_plant_proto_rawDescGZIP() []byte {
	file_plant_proto_rawDescOnce.Do(func() {
		file_plant_proto_rawDescData = protoimpl.X.CompressGZIP(file_plant_proto_rawDescData)
	})
	return file_plant_proto_rawDescData
}

var file_plant_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_plant_proto_goTypes = []interface{}{
	(*PlantOperaInfo)(nil), // 0: model.PlantOperaInfo
	(*PlantInfo)(nil),      // 1: model.PlantInfo
	(*PlantInfoList)(nil),  // 2: model.PlantInfoList
}
var file_plant_proto_depIdxs = []int32{
	0, // 0: model.PlantInfo.plantOperaList:type_name -> model.PlantOperaInfo
	1, // 1: model.PlantInfoList.plantList:type_name -> model.PlantInfo
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_plant_proto_init() }
func file_plant_proto_init() {
	if File_plant_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plant_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantOperaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plant_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plant_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlantInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plant_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plant_proto_goTypes,
		DependencyIndexes: file_plant_proto_depIdxs,
		MessageInfos:      file_plant_proto_msgTypes,
	}.Build()
	File_plant_proto = out.File
	file_plant_proto_rawDesc = nil
	file_plant_proto_goTypes = nil
	file_plant_proto_depIdxs = nil
}

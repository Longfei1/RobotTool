// protoc --proto_path=./pb --go_out=./pbgo --go_opt=paths=source_relative ./pb/bluevip.proto
// protoc-go-inject-tag -input="./pbgo/bluevip.pb.go"
// goctl model mongo -e -dir ./model -t BlueVip --home template -c
// 蓝钻相关

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.0--rc1
// source: bluevip.proto

package pbgo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EBlueVip int32

const (
	EBlueVip_EBV_Invalid        EBlueVip = 0
	EBlueVip_EBV_Lvl1DayId      EBlueVip = 1  // 蓝钻1级每日礼包id
	EBlueVip_EBV_Lv2DayId       EBlueVip = 2  // 蓝钻2级每日礼包id
	EBlueVip_EBV_Lv3DayId       EBlueVip = 3  // 蓝钻3级每日礼包id
	EBlueVip_EBV_Lv4DayId       EBlueVip = 4  // 蓝钻4级每日礼包id
	EBlueVip_EBV_Lv5DayId       EBlueVip = 5  // 蓝钻5级每日礼包id
	EBlueVip_EBV_Lv6DayId       EBlueVip = 6  // 蓝钻6级每日礼包id
	EBlueVip_EBV_Lv7DayId       EBlueVip = 7  // 蓝钻7级每日礼包id
	EBlueVip_EBV_SuperDayId     EBlueVip = 8  // 蓝钻豪华每日礼包id
	EBlueVip_EBV_YearDayId      EBlueVip = 9  // 蓝钻年费每日礼包id
	EBlueVip_EBV_LvlId          EBlueVip = 10 // 蓝钻贵族新手礼包id
	EBlueVip_EBV_YearLvlStartId EBlueVip = 11 // 蓝钻豪华新手等级开始礼包id
	EBlueVip_EBV_YearLvlMaxId   EBlueVip = 40 // 蓝钻豪华新手最大等级礼包id  可以根据配置先预留，预留不够的情况下，直接往后加就可以
)

// Enum value maps for EBlueVip.
var (
	EBlueVip_name = map[int32]string{
		0:  "EBV_Invalid",
		1:  "EBV_Lvl1DayId",
		2:  "EBV_Lv2DayId",
		3:  "EBV_Lv3DayId",
		4:  "EBV_Lv4DayId",
		5:  "EBV_Lv5DayId",
		6:  "EBV_Lv6DayId",
		7:  "EBV_Lv7DayId",
		8:  "EBV_SuperDayId",
		9:  "EBV_YearDayId",
		10: "EBV_LvlId",
		11: "EBV_YearLvlStartId",
		40: "EBV_YearLvlMaxId",
	}
	EBlueVip_value = map[string]int32{
		"EBV_Invalid":        0,
		"EBV_Lvl1DayId":      1,
		"EBV_Lv2DayId":       2,
		"EBV_Lv3DayId":       3,
		"EBV_Lv4DayId":       4,
		"EBV_Lv5DayId":       5,
		"EBV_Lv6DayId":       6,
		"EBV_Lv7DayId":       7,
		"EBV_SuperDayId":     8,
		"EBV_YearDayId":      9,
		"EBV_LvlId":          10,
		"EBV_YearLvlStartId": 11,
		"EBV_YearLvlMaxId":   40,
	}
)

func (x EBlueVip) Enum() *EBlueVip {
	p := new(EBlueVip)
	*p = x
	return p
}

func (x EBlueVip) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBlueVip) Descriptor() protoreflect.EnumDescriptor {
	return file_bluevip_proto_enumTypes[0].Descriptor()
}

func (EBlueVip) Type() protoreflect.EnumType {
	return &file_bluevip_proto_enumTypes[0]
}

func (x EBlueVip) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EBlueVip.Descriptor instead.
func (EBlueVip) EnumDescriptor() ([]byte, []int) {
	return file_bluevip_proto_rawDescGZIP(), []int{0}
}

type EBlueVipType int32

const (
	EBlueVipType_EBVT_Invalid EBlueVipType = 0
	EBlueVipType_EBVT_Common  EBlueVipType = 1 // 普通蓝钻
	EBlueVipType_EBVT_Super   EBlueVipType = 2 // 豪华蓝钻
	EBlueVipType_EBVT_Year    EBlueVipType = 3 // 年费蓝钻
)

// Enum value maps for EBlueVipType.
var (
	EBlueVipType_name = map[int32]string{
		0: "EBVT_Invalid",
		1: "EBVT_Common",
		2: "EBVT_Super",
		3: "EBVT_Year",
	}
	EBlueVipType_value = map[string]int32{
		"EBVT_Invalid": 0,
		"EBVT_Common":  1,
		"EBVT_Super":   2,
		"EBVT_Year":    3,
	}
)

func (x EBlueVipType) Enum() *EBlueVipType {
	p := new(EBlueVipType)
	*p = x
	return p
}

func (x EBlueVipType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBlueVipType) Descriptor() protoreflect.EnumDescriptor {
	return file_bluevip_proto_enumTypes[1].Descriptor()
}

func (EBlueVipType) Type() protoreflect.EnumType {
	return &file_bluevip_proto_enumTypes[1]
}

func (x EBlueVipType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EBlueVipType.Descriptor instead.
func (EBlueVipType) EnumDescriptor() ([]byte, []int) {
	return file_bluevip_proto_rawDescGZIP(), []int{1}
}

type EBlueVipGiftType int32

const (
	EBlueVipGiftType_EBVGT_Invalid    EBlueVipGiftType = 0
	EBlueVipGiftType_EBVGT_Daily      EBlueVipGiftType = 1 // 每日蓝钻礼包
	EBlueVipGiftType_EBVGT_DailySuper EBlueVipGiftType = 2 // 每日豪华礼包
	EBlueVipGiftType_EBVGT_DailyYear  EBlueVipGiftType = 3 // 每日年费礼包
	EBlueVipGiftType_EBVGT_Novices    EBlueVipGiftType = 4 // 新手礼包
	EBlueVipGiftType_EBVGT_Level      EBlueVipGiftType = 5 // 等级礼包
)

// Enum value maps for EBlueVipGiftType.
var (
	EBlueVipGiftType_name = map[int32]string{
		0: "EBVGT_Invalid",
		1: "EBVGT_Daily",
		2: "EBVGT_DailySuper",
		3: "EBVGT_DailyYear",
		4: "EBVGT_Novices",
		5: "EBVGT_Level",
	}
	EBlueVipGiftType_value = map[string]int32{
		"EBVGT_Invalid":    0,
		"EBVGT_Daily":      1,
		"EBVGT_DailySuper": 2,
		"EBVGT_DailyYear":  3,
		"EBVGT_Novices":    4,
		"EBVGT_Level":      5,
	}
)

func (x EBlueVipGiftType) Enum() *EBlueVipGiftType {
	p := new(EBlueVipGiftType)
	*p = x
	return p
}

func (x EBlueVipGiftType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBlueVipGiftType) Descriptor() protoreflect.EnumDescriptor {
	return file_bluevip_proto_enumTypes[2].Descriptor()
}

func (EBlueVipGiftType) Type() protoreflect.EnumType {
	return &file_bluevip_proto_enumTypes[2]
}

func (x EBlueVipGiftType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EBlueVipGiftType.Descriptor instead.
func (EBlueVipGiftType) EnumDescriptor() ([]byte, []int) {
	return file_bluevip_proto_rawDescGZIP(), []int{2}
}

type BlueVip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"_id"
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// @inject_tag: bson:"rewardTimes"
	RewardTimes []uint32 `protobuf:"varint,2,rep,packed,name=rewardTimes,proto3" json:"rewardTimes,omitempty"`
	// @inject_tag: bson:"seq"
	Seq uint64 `protobuf:"varint,3,opt,name=seq,proto3" json:"seq,omitempty"`
}

func (x *BlueVip) Reset() {
	*x = BlueVip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bluevip_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlueVip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlueVip) ProtoMessage() {}

func (x *BlueVip) ProtoReflect() protoreflect.Message {
	mi := &file_bluevip_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlueVip.ProtoReflect.Descriptor instead.
func (*BlueVip) Descriptor() ([]byte, []int) {
	return file_bluevip_proto_rawDescGZIP(), []int{0}
}

func (x *BlueVip) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *BlueVip) GetRewardTimes() []uint32 {
	if x != nil {
		return x.RewardTimes
	}
	return nil
}

func (x *BlueVip) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

var File_bluevip_proto protoreflect.FileDescriptor

var file_bluevip_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x6c, 0x75, 0x65, 0x76, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x4f, 0x0a, 0x07, 0x42, 0x6c, 0x75, 0x65, 0x56, 0x69,
	0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x2a, 0xfe, 0x01, 0x0a, 0x08, 0x45, 0x42, 0x6c, 0x75,
	0x65, 0x56, 0x69, 0x70, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x42, 0x56, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x42, 0x56, 0x5f, 0x4c, 0x76, 0x6c,
	0x31, 0x44, 0x61, 0x79, 0x49, 0x64, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x42, 0x56, 0x5f,
	0x4c, 0x76, 0x32, 0x44, 0x61, 0x79, 0x49, 0x64, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x42,
	0x56, 0x5f, 0x4c, 0x76, 0x33, 0x44, 0x61, 0x79, 0x49, 0x64, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x45, 0x42, 0x56, 0x5f, 0x4c, 0x76, 0x34, 0x44, 0x61, 0x79, 0x49, 0x64, 0x10, 0x04, 0x12, 0x10,
	0x0a, 0x0c, 0x45, 0x42, 0x56, 0x5f, 0x4c, 0x76, 0x35, 0x44, 0x61, 0x79, 0x49, 0x64, 0x10, 0x05,
	0x12, 0x10, 0x0a, 0x0c, 0x45, 0x42, 0x56, 0x5f, 0x4c, 0x76, 0x36, 0x44, 0x61, 0x79, 0x49, 0x64,
	0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x42, 0x56, 0x5f, 0x4c, 0x76, 0x37, 0x44, 0x61, 0x79,
	0x49, 0x64, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x42, 0x56, 0x5f, 0x53, 0x75, 0x70, 0x65,
	0x72, 0x44, 0x61, 0x79, 0x49, 0x64, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x42, 0x56, 0x5f,
	0x59, 0x65, 0x61, 0x72, 0x44, 0x61, 0x79, 0x49, 0x64, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x42, 0x56, 0x5f, 0x4c, 0x76, 0x6c, 0x49, 0x64, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x42,
	0x56, 0x5f, 0x59, 0x65, 0x61, 0x72, 0x4c, 0x76, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64,
	0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x42, 0x56, 0x5f, 0x59, 0x65, 0x61, 0x72, 0x4c, 0x76,
	0x6c, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x10, 0x28, 0x2a, 0x50, 0x0a, 0x0c, 0x45, 0x42, 0x6c, 0x75,
	0x65, 0x56, 0x69, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x42, 0x56, 0x54,
	0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x42,
	0x56, 0x54, 0x5f, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x42, 0x56, 0x54, 0x5f, 0x53, 0x75, 0x70, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x42, 0x56, 0x54, 0x5f, 0x59, 0x65, 0x61, 0x72, 0x10, 0x03, 0x2a, 0x85, 0x01, 0x0a, 0x10, 0x45,
	0x42, 0x6c, 0x75, 0x65, 0x56, 0x69, 0x70, 0x47, 0x69, 0x66, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x45, 0x42, 0x56, 0x47, 0x54, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x42, 0x56, 0x47, 0x54, 0x5f, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x42, 0x56, 0x47, 0x54, 0x5f, 0x44, 0x61, 0x69,
	0x6c, 0x79, 0x53, 0x75, 0x70, 0x65, 0x72, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x42, 0x56,
	0x47, 0x54, 0x5f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x59, 0x65, 0x61, 0x72, 0x10, 0x03, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x42, 0x56, 0x47, 0x54, 0x5f, 0x4e, 0x6f, 0x76, 0x69, 0x63, 0x65, 0x73, 0x10,
	0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x42, 0x56, 0x47, 0x54, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x10, 0x05, 0x42, 0x0d, 0x5a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x67,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bluevip_proto_rawDescOnce sync.Once
	file_bluevip_proto_rawDescData = file_bluevip_proto_rawDesc
)

func file_bluevip_proto_rawDescGZIP() []byte {
	file_bluevip_proto_rawDescOnce.Do(func() {
		file_bluevip_proto_rawDescData = protoimpl.X.CompressGZIP(file_bluevip_proto_rawDescData)
	})
	return file_bluevip_proto_rawDescData
}

var file_bluevip_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bluevip_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_bluevip_proto_goTypes = []interface{}{
	(EBlueVip)(0),         // 0: model.EBlueVip
	(EBlueVipType)(0),     // 1: model.EBlueVipType
	(EBlueVipGiftType)(0), // 2: model.EBlueVipGiftType
	(*BlueVip)(nil),       // 3: model.BlueVip
}
var file_bluevip_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_bluevip_proto_init() }
func file_bluevip_proto_init() {
	if File_bluevip_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bluevip_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlueVip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bluevip_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bluevip_proto_goTypes,
		DependencyIndexes: file_bluevip_proto_depIdxs,
		EnumInfos:         file_bluevip_proto_enumTypes,
		MessageInfos:      file_bluevip_proto_msgTypes,
	}.Build()
	File_bluevip_proto = out.File
	file_bluevip_proto_rawDesc = nil
	file_bluevip_proto_goTypes = nil
	file_bluevip_proto_depIdxs = nil
}

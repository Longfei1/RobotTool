// protoc --proto_path=./docproj/msg --go_out=./pbgo --go_opt=paths=source_relative ./docproj/msg/common.proto

//!!!!!!! 删除生成的worldtypes, 代码成替换成model对象

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.0--rc1
// source: common.proto

package pbgo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ECommon int32

const (
	ECommon_EC_Invalid           ECommon = 0
	ECommon_EC_MaxProductListLen ECommon = 6
	ECommon_EC_MaxPlantEventLen  ECommon = 4
)

// Enum value maps for ECommon.
var (
	ECommon_name = map[int32]string{
		0: "EC_Invalid",
		6: "EC_MaxProductListLen",
		4: "EC_MaxPlantEventLen",
	}
	ECommon_value = map[string]int32{
		"EC_Invalid":           0,
		"EC_MaxProductListLen": 6,
		"EC_MaxPlantEventLen":  4,
	}
)

func (x ECommon) Enum() *ECommon {
	p := new(ECommon)
	*p = x
	return p
}

func (x ECommon) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECommon) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (ECommon) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x ECommon) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECommon.Descriptor instead.
func (ECommon) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type EBuildingType int32

const (
	EBuildingType_EBT_Invalid             EBuildingType = 0
	EBuildingType_EBT_Common              EBuildingType = 1
	EBuildingType_EBT_DecorationUnlimited EBuildingType = 1005
	EBuildingType_EBT_DecorationLimited   EBuildingType = 1006
)

// Enum value maps for EBuildingType.
var (
	EBuildingType_name = map[int32]string{
		0:    "EBT_Invalid",
		1:    "EBT_Common",
		1005: "EBT_DecorationUnlimited",
		1006: "EBT_DecorationLimited",
	}
	EBuildingType_value = map[string]int32{
		"EBT_Invalid":             0,
		"EBT_Common":              1,
		"EBT_DecorationUnlimited": 1005,
		"EBT_DecorationLimited":   1006,
	}
)

func (x EBuildingType) Enum() *EBuildingType {
	p := new(EBuildingType)
	*p = x
	return p
}

func (x EBuildingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EBuildingType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (EBuildingType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x EBuildingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EBuildingType.Descriptor instead.
func (EBuildingType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

type ETaskId int32

const (
	ETaskId_ETI_Invalid ETaskId = 0
)

// Enum value maps for ETaskId.
var (
	ETaskId_name = map[int32]string{
		0: "ETI_Invalid",
	}
	ETaskId_value = map[string]int32{
		"ETI_Invalid": 0,
	}
)

func (x ETaskId) Enum() *ETaskId {
	p := new(ETaskId)
	*p = x
	return p
}

func (x ETaskId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETaskId) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (ETaskId) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x ETaskId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETaskId.Descriptor instead.
func (ETaskId) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type EPetBufferBase int32

const (
	EPetBufferBase_EPBB_Invalid EPetBufferBase = 0
	EPetBufferBase_EPBB_Step    EPetBufferBase = 100000
)

// Enum value maps for EPetBufferBase.
var (
	EPetBufferBase_name = map[int32]string{
		0:      "EPBB_Invalid",
		100000: "EPBB_Step",
	}
	EPetBufferBase_value = map[string]int32{
		"EPBB_Invalid": 0,
		"EPBB_Step":    100000,
	}
)

func (x EPetBufferBase) Enum() *EPetBufferBase {
	p := new(EPetBufferBase)
	*p = x
	return p
}

func (x EPetBufferBase) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPetBufferBase) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (EPetBufferBase) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x EPetBufferBase) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPetBufferBase.Descriptor instead.
func (EPetBufferBase) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

type EPropId int32

const (
	EPropId_EPI_Invalid                     EPropId = 0
	EPropId_EPI_Gold                        EPropId = 10010001  //! 金币
	EPropId_EPI_Diamond                     EPropId = 10010002  //! 钻石
	EPropId_EPI_Llk_Coin                    EPropId = 10010003  //! 连连看游戏币
	EPropId_EPI_Exp                         EPropId = 10010004  //! 经验道具 需要取数量来计算等级
	EPropId_EPI_Lvl                         EPropId = 10010005  //! 玩家等级
	EPropId_EPI_Comfort                     EPropId = 10010006  //! 舒适度道具 需要取数量来计算等级
	EPropId_EPI_ComfortLimit                EPropId = 10010007  //! 舒适度上限 需要取数量来计算等级
	EPropId_EPI_Llk_Score                   EPropId = 10010010  //! 连连看积分
	EPropId_EPI_MonthSupply                 EPropId = 10010011  //! 月卡
	EPropId_EPI_ActLevelUpgrade             EPropId = 10010012  //! 冲级活动额外奖励
	EPropId_EPI_ActTaskPlan                 EPropId = 10010013  //! 战令额外奖励
	EPropId_EPI_ComfortVirtual              EPropId = 10010126  //! 虚拟舒适度
	EPropId_EPI_Farm                        EPropId = 100200003 //! 田地
	EPropId_EPI_MainHouse                   EPropId = 100200030 //! 修复好的主屋
	EPropId_EPI_Delivery                    EPropId = 100200007 //! 电商驿站建筑
	EPropId_EPI_SPEED                       EPropId = 10520008  //! 加速道具
	EPropId_EPI_Restock                     EPropId = 10520009  //! 补货道具
	EPropId_EPI_TaskOrder                   EPropId = 40111008  //! 提交一次订单
	EPropId_EPI_PlantBufferInvalid          EPropId = 50010000  //! 表示不需要随机出plantBuffer
	EPropId_EPI_WaterShortage               EPropId = 50010004  //! 缺水道具
	EPropId_EPI_PlantBufferSpeedUp          EPropId = 50010110  //! 加速
	EPropId_EPI_PlantBufferSpeedUpMonthCard EPropId = 50010111  //! 月卡加速
)

// Enum value maps for EPropId.
var (
	EPropId_name = map[int32]string{
		0:         "EPI_Invalid",
		10010001:  "EPI_Gold",
		10010002:  "EPI_Diamond",
		10010003:  "EPI_Llk_Coin",
		10010004:  "EPI_Exp",
		10010005:  "EPI_Lvl",
		10010006:  "EPI_Comfort",
		10010007:  "EPI_ComfortLimit",
		10010010:  "EPI_Llk_Score",
		10010011:  "EPI_MonthSupply",
		10010012:  "EPI_ActLevelUpgrade",
		10010013:  "EPI_ActTaskPlan",
		10010126:  "EPI_ComfortVirtual",
		100200003: "EPI_Farm",
		100200030: "EPI_MainHouse",
		100200007: "EPI_Delivery",
		10520008:  "EPI_SPEED",
		10520009:  "EPI_Restock",
		40111008:  "EPI_TaskOrder",
		50010000:  "EPI_PlantBufferInvalid",
		50010004:  "EPI_WaterShortage",
		50010110:  "EPI_PlantBufferSpeedUp",
		50010111:  "EPI_PlantBufferSpeedUpMonthCard",
	}
	EPropId_value = map[string]int32{
		"EPI_Invalid":                     0,
		"EPI_Gold":                        10010001,
		"EPI_Diamond":                     10010002,
		"EPI_Llk_Coin":                    10010003,
		"EPI_Exp":                         10010004,
		"EPI_Lvl":                         10010005,
		"EPI_Comfort":                     10010006,
		"EPI_ComfortLimit":                10010007,
		"EPI_Llk_Score":                   10010010,
		"EPI_MonthSupply":                 10010011,
		"EPI_ActLevelUpgrade":             10010012,
		"EPI_ActTaskPlan":                 10010013,
		"EPI_ComfortVirtual":              10010126,
		"EPI_Farm":                        100200003,
		"EPI_MainHouse":                   100200030,
		"EPI_Delivery":                    100200007,
		"EPI_SPEED":                       10520008,
		"EPI_Restock":                     10520009,
		"EPI_TaskOrder":                   40111008,
		"EPI_PlantBufferInvalid":          50010000,
		"EPI_WaterShortage":               50010004,
		"EPI_PlantBufferSpeedUp":          50010110,
		"EPI_PlantBufferSpeedUpMonthCard": 50010111,
	}
)

func (x EPropId) Enum() *EPropId {
	p := new(EPropId)
	*p = x
	return p
}

func (x EPropId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPropId) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (EPropId) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x EPropId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPropId.Descriptor instead.
func (EPropId) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

type EPlantEventId int32

const (
	EPlantEventId_EPEI_Invalid  EPlantEventId = 0
	EPlantEventId_EPEI_Water    EPlantEventId = 50010003 //! 浇水
	EPlantEventId_EPEI_Rip      EPlantEventId = 50010018 //! 松土
	EPlantEventId_EPEI_Weed     EPlantEventId = 50010020 //! 除草
	EPlantEventId_EPEI_DeInsect EPlantEventId = 50010022 //! 驱虫
)

// Enum value maps for EPlantEventId.
var (
	EPlantEventId_name = map[int32]string{
		0:        "EPEI_Invalid",
		50010003: "EPEI_Water",
		50010018: "EPEI_Rip",
		50010020: "EPEI_Weed",
		50010022: "EPEI_DeInsect",
	}
	EPlantEventId_value = map[string]int32{
		"EPEI_Invalid":  0,
		"EPEI_Water":    50010003,
		"EPEI_Rip":      50010018,
		"EPEI_Weed":     50010020,
		"EPEI_DeInsect": 50010022,
	}
)

func (x EPlantEventId) Enum() *EPlantEventId {
	p := new(EPlantEventId)
	*p = x
	return p
}

func (x EPlantEventId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPlantEventId) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (EPlantEventId) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x EPlantEventId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPlantEventId.Descriptor instead.
func (EPlantEventId) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

type ESciencePropId int32

const (
	ESciencePropId_ESPI_Invalid ESciencePropId = 0
	ESciencePropId_ESPI_Start   ESciencePropId = 10010101 //! 科技道具起始id
	ESciencePropId_ESPI_End     ESciencePropId = 10010121 //! 科技道具结束id
)

// Enum value maps for ESciencePropId.
var (
	ESciencePropId_name = map[int32]string{
		0:        "ESPI_Invalid",
		10010101: "ESPI_Start",
		10010121: "ESPI_End",
	}
	ESciencePropId_value = map[string]int32{
		"ESPI_Invalid": 0,
		"ESPI_Start":   10010101,
		"ESPI_End":     10010121,
	}
)

func (x ESciencePropId) Enum() *ESciencePropId {
	p := new(ESciencePropId)
	*p = x
	return p
}

func (x ESciencePropId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ESciencePropId) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[6].Descriptor()
}

func (ESciencePropId) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[6]
}

func (x ESciencePropId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ESciencePropId.Descriptor instead.
func (ESciencePropId) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

type EPlantBuffOp int32

const (
	EPlantBuffOp_EPBO_Invalid EPlantBuffOp = 0
	EPlantBuffOp_EPBO_Prune   EPlantBuffOp = 30010012 //! 剪枝
	EPlantBuffOp_EPBO_Graft   EPlantBuffOp = 30010013 //! 嫁接
)

// Enum value maps for EPlantBuffOp.
var (
	EPlantBuffOp_name = map[int32]string{
		0:        "EPBO_Invalid",
		30010012: "EPBO_Prune",
		30010013: "EPBO_Graft",
	}
	EPlantBuffOp_value = map[string]int32{
		"EPBO_Invalid": 0,
		"EPBO_Prune":   30010012,
		"EPBO_Graft":   30010013,
	}
)

func (x EPlantBuffOp) Enum() *EPlantBuffOp {
	p := new(EPlantBuffOp)
	*p = x
	return p
}

func (x EPlantBuffOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPlantBuffOp) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[7].Descriptor()
}

func (EPlantBuffOp) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[7]
}

func (x EPlantBuffOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPlantBuffOp.Descriptor instead.
func (EPlantBuffOp) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

type ETaskEventId int32

const (
	ETaskEventId_ETEI_Invalid        ETaskEventId = 0
	ETaskEventId_ETEI_Bag            ETaskEventId = 1        //! 背包
	ETaskEventId_ETEI_Building       ETaskEventId = 2        //! 建筑列表
	ETaskEventId_ETEI_Exp            ETaskEventId = 40011000 //! 玩家经验统计事件
	ETaskEventId_ETEI_Build          ETaskEventId = 40011001 //! 建造完成事件
	ETaskEventId_ETEI_Plant          ETaskEventId = 40011002 //! 种植事件
	ETaskEventId_ETEI_Harvest        ETaskEventId = 40011004 //! 收获事件
	ETaskEventId_ETEI_Product        ETaskEventId = 40011006 //! 制造事件
	ETaskEventId_ETEI_Order          ETaskEventId = 40011008 //! 交付订单事件
	ETaskEventId_ETEI_LvlUpgrade     ETaskEventId = 40011009 //! 玩家等级提升事件
	ETaskEventId_ETEI_OwnItem        ETaskEventId = 40011010 //! 物品变化 舒适度也是道具(存量)
	ETaskEventId_ETEI_RepairEnd      ETaskEventId = 40011011 //! 建筑修复完成
	ETaskEventId_ETEI_CostItem       ETaskEventId = 40011012 //! 消耗道具
	ETaskEventId_ETEI_AddItem        ETaskEventId = 40011013 //! 获得道具
	ETaskEventId_ETEI_Formula        ETaskEventId = 40011021 //! 完成配方研究
	ETaskEventId_ETEI_DeliveryEnd    ETaskEventId = 40011022 //! 电商驿站发货回来完成
	ETaskEventId_ETEI_ScienceOpt     ETaskEventId = 40011023 //! 科技树操作
	ETaskEventId_ETEI_DeliveryStart  ETaskEventId = 40011024 //! 电商驿站开始发货
	ETaskEventId_ETEI_PetAssign      ETaskEventId = 40011033 //! 宠物工作
	ETaskEventId_ETEI_GotPet         ETaskEventId = 40011037 //! 领养宠物
	ETaskEventId_ETEI_BuildStart     ETaskEventId = 40011038 //! 开始建造
	ETaskEventId_ETEI_PetUpgrade     ETaskEventId = 40011039 //! 宠物喂养
	ETaskEventId_ETEI_RepairStart    ETaskEventId = 40011040 //! 开始修复
	ETaskEventId_ETEI_DecorateAdd    ETaskEventId = 40011041 //! 地块建造
	ETaskEventId_ETEI_DecorateRem    ETaskEventId = 40011042 //! 地块拆除
	ETaskEventId_ETEI_RemoveEnd      ETaskEventId = 40011043 //! 建筑拆除完成
	ETaskEventId_ETEI_RechargeNum    ETaskEventId = 40011044 //! 充值数量
	ETaskEventId_ETEI_RechargeAmount ETaskEventId = 40011045 //! 充值金额
)

// Enum value maps for ETaskEventId.
var (
	ETaskEventId_name = map[int32]string{
		0:        "ETEI_Invalid",
		1:        "ETEI_Bag",
		2:        "ETEI_Building",
		40011000: "ETEI_Exp",
		40011001: "ETEI_Build",
		40011002: "ETEI_Plant",
		40011004: "ETEI_Harvest",
		40011006: "ETEI_Product",
		40011008: "ETEI_Order",
		40011009: "ETEI_LvlUpgrade",
		40011010: "ETEI_OwnItem",
		40011011: "ETEI_RepairEnd",
		40011012: "ETEI_CostItem",
		40011013: "ETEI_AddItem",
		40011021: "ETEI_Formula",
		40011022: "ETEI_DeliveryEnd",
		40011023: "ETEI_ScienceOpt",
		40011024: "ETEI_DeliveryStart",
		40011033: "ETEI_PetAssign",
		40011037: "ETEI_GotPet",
		40011038: "ETEI_BuildStart",
		40011039: "ETEI_PetUpgrade",
		40011040: "ETEI_RepairStart",
		40011041: "ETEI_DecorateAdd",
		40011042: "ETEI_DecorateRem",
		40011043: "ETEI_RemoveEnd",
		40011044: "ETEI_RechargeNum",
		40011045: "ETEI_RechargeAmount",
	}
	ETaskEventId_value = map[string]int32{
		"ETEI_Invalid":        0,
		"ETEI_Bag":            1,
		"ETEI_Building":       2,
		"ETEI_Exp":            40011000,
		"ETEI_Build":          40011001,
		"ETEI_Plant":          40011002,
		"ETEI_Harvest":        40011004,
		"ETEI_Product":        40011006,
		"ETEI_Order":          40011008,
		"ETEI_LvlUpgrade":     40011009,
		"ETEI_OwnItem":        40011010,
		"ETEI_RepairEnd":      40011011,
		"ETEI_CostItem":       40011012,
		"ETEI_AddItem":        40011013,
		"ETEI_Formula":        40011021,
		"ETEI_DeliveryEnd":    40011022,
		"ETEI_ScienceOpt":     40011023,
		"ETEI_DeliveryStart":  40011024,
		"ETEI_PetAssign":      40011033,
		"ETEI_GotPet":         40011037,
		"ETEI_BuildStart":     40011038,
		"ETEI_PetUpgrade":     40011039,
		"ETEI_RepairStart":    40011040,
		"ETEI_DecorateAdd":    40011041,
		"ETEI_DecorateRem":    40011042,
		"ETEI_RemoveEnd":      40011043,
		"ETEI_RechargeNum":    40011044,
		"ETEI_RechargeAmount": 40011045,
	}
)

func (x ETaskEventId) Enum() *ETaskEventId {
	p := new(ETaskEventId)
	*p = x
	return p
}

func (x ETaskEventId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETaskEventId) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[8].Descriptor()
}

func (ETaskEventId) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[8]
}

func (x ETaskEventId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETaskEventId.Descriptor instead.
func (ETaskEventId) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

type ECommonRefreshType int32

const (
	ECommonRefreshType_ECRT_None ECommonRefreshType = 0 //! 不刷新
	ECommonRefreshType_ECRT_Day  ECommonRefreshType = 1 //! 每日刷新
	ECommonRefreshType_ECRT_Week ECommonRefreshType = 2 //! 每周刷新
	ECommonRefreshType_ECRT_Mon  ECommonRefreshType = 3 //! 每月刷新
	ECommonRefreshType_ECRT_Time ECommonRefreshType = 4 //! 按时刷新
)

// Enum value maps for ECommonRefreshType.
var (
	ECommonRefreshType_name = map[int32]string{
		0: "ECRT_None",
		1: "ECRT_Day",
		2: "ECRT_Week",
		3: "ECRT_Mon",
		4: "ECRT_Time",
	}
	ECommonRefreshType_value = map[string]int32{
		"ECRT_None": 0,
		"ECRT_Day":  1,
		"ECRT_Week": 2,
		"ECRT_Mon":  3,
		"ECRT_Time": 4,
	}
)

func (x ECommonRefreshType) Enum() *ECommonRefreshType {
	p := new(ECommonRefreshType)
	*p = x
	return p
}

func (x ECommonRefreshType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ECommonRefreshType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[9].Descriptor()
}

func (ECommonRefreshType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[9]
}

func (x ECommonRefreshType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ECommonRefreshType.Descriptor instead.
func (ECommonRefreshType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

type ETaskStatus int32

const (
	ETaskStatus_ETS_Invalid  ETaskStatus = 0
	ETaskStatus_ETS_Accept   ETaskStatus = 1 //! 客户端已接受 只用于客户端红点显示,没接受一样可以累计
	ETaskStatus_ETS_Rewarded ETaskStatus = 2 //! 已完成的任务
)

// Enum value maps for ETaskStatus.
var (
	ETaskStatus_name = map[int32]string{
		0: "ETS_Invalid",
		1: "ETS_Accept",
		2: "ETS_Rewarded",
	}
	ETaskStatus_value = map[string]int32{
		"ETS_Invalid":  0,
		"ETS_Accept":   1,
		"ETS_Rewarded": 2,
	}
)

func (x ETaskStatus) Enum() *ETaskStatus {
	p := new(ETaskStatus)
	*p = x
	return p
}

func (x ETaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[10].Descriptor()
}

func (ETaskStatus) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[10]
}

func (x ETaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETaskStatus.Descriptor instead.
func (ETaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

type ERefreshType int32

const (
	ERefreshType_ETRT_None      ERefreshType = 0
	ERefreshType_ETRT_Day       ERefreshType = 1
	ERefreshType_ETRT_Week      ERefreshType = 2
	ERefreshType_ETRT_Month     ERefreshType = 3
	ERefreshType_ETRT_MonthWeek ERefreshType = 4 //每月第x个周y
)

// Enum value maps for ERefreshType.
var (
	ERefreshType_name = map[int32]string{
		0: "ETRT_None",
		1: "ETRT_Day",
		2: "ETRT_Week",
		3: "ETRT_Month",
		4: "ETRT_MonthWeek",
	}
	ERefreshType_value = map[string]int32{
		"ETRT_None":      0,
		"ETRT_Day":       1,
		"ETRT_Week":      2,
		"ETRT_Month":     3,
		"ETRT_MonthWeek": 4,
	}
)

func (x ERefreshType) Enum() *ERefreshType {
	p := new(ERefreshType)
	*p = x
	return p
}

func (x ERefreshType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ERefreshType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[11].Descriptor()
}

func (ERefreshType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[11]
}

func (x ERefreshType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ERefreshType.Descriptor instead.
func (ERefreshType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

// 玩家操作, 账单用
type EUserOperId int32

const (
	EUserOperId_EPOI_Invalid        EUserOperId = 0
	EUserOperId_EPOI_Act_TaskPlan   EUserOperId = 1000 //! 活动_战令
	EUserOperId_EPOI_Act_LvlUpgrade EUserOperId = 2000 //! 活动_冲级
)

// Enum value maps for EUserOperId.
var (
	EUserOperId_name = map[int32]string{
		0:    "EPOI_Invalid",
		1000: "EPOI_Act_TaskPlan",
		2000: "EPOI_Act_LvlUpgrade",
	}
	EUserOperId_value = map[string]int32{
		"EPOI_Invalid":        0,
		"EPOI_Act_TaskPlan":   1000,
		"EPOI_Act_LvlUpgrade": 2000,
	}
)

func (x EUserOperId) Enum() *EUserOperId {
	p := new(EUserOperId)
	*p = x
	return p
}

func (x EUserOperId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EUserOperId) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[12].Descriptor()
}

func (EUserOperId) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[12]
}

func (x EUserOperId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EUserOperId.Descriptor instead.
func (EUserOperId) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

// 配置文件中的刷新id（定义成枚举，供特定情形下使用）
type EFlushId int32

const (
	EFlushId_EFI_None       EFlushId = 0
	EFlushId_EFI_Day        EFlushId = 1 //每日6点
	EFlushId_EFI_Week       EFlushId = 2 //每周一6点
	EFlushId_EFI_Month      EFlushId = 3 //每月1日6点
	EFlushId_EFI_Day0       EFlushId = 4 //每日0点
	EFlushId_EFI_Month2Week EFlushId = 5 //每月第2周周1
	EFlushId_EFI_Month4Week EFlushId = 6 //每月第4周周1
)

// Enum value maps for EFlushId.
var (
	EFlushId_name = map[int32]string{
		0: "EFI_None",
		1: "EFI_Day",
		2: "EFI_Week",
		3: "EFI_Month",
		4: "EFI_Day0",
		5: "EFI_Month2Week",
		6: "EFI_Month4Week",
	}
	EFlushId_value = map[string]int32{
		"EFI_None":       0,
		"EFI_Day":        1,
		"EFI_Week":       2,
		"EFI_Month":      3,
		"EFI_Day0":       4,
		"EFI_Month2Week": 5,
		"EFI_Month4Week": 6,
	}
)

func (x EFlushId) Enum() *EFlushId {
	p := new(EFlushId)
	*p = x
	return p
}

func (x EFlushId) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EFlushId) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[13].Descriptor()
}

func (EFlushId) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[13]
}

func (x EFlushId) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EFlushId.Descriptor instead.
func (EFlushId) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2a, 0x4c, 0x0a, 0x07, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x43, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x43, 0x5f, 0x4d, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x6e, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x43,
	0x5f, 0x4d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x65,
	0x6e, 0x10, 0x04, 0x2a, 0x6a, 0x0a, 0x0d, 0x45, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x42, 0x54, 0x5f, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x42, 0x54, 0x5f, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x45, 0x42, 0x54, 0x5f, 0x44, 0x65, 0x63,
	0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x10, 0xed, 0x07, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x42, 0x54, 0x5f, 0x44, 0x65, 0x63, 0x6f, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0xee, 0x07, 0x2a,
	0x1a, 0x0a, 0x07, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x54,
	0x49, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x2a, 0x33, 0x0a, 0x0e, 0x45,
	0x50, 0x65, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x42, 0x61, 0x73, 0x65, 0x12, 0x10, 0x0a,
	0x0c, 0x45, 0x50, 0x42, 0x42, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12,
	0x0f, 0x0a, 0x09, 0x45, 0x50, 0x42, 0x42, 0x5f, 0x53, 0x74, 0x65, 0x70, 0x10, 0xa0, 0x8d, 0x06,
	0x2a, 0x96, 0x04, 0x0a, 0x07, 0x45, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x50, 0x49, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0f, 0x0a,
	0x08, 0x45, 0x50, 0x49, 0x5f, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x91, 0xfb, 0xe2, 0x04, 0x12, 0x12,
	0x0a, 0x0b, 0x45, 0x50, 0x49, 0x5f, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x10, 0x92, 0xfb,
	0xe2, 0x04, 0x12, 0x13, 0x0a, 0x0c, 0x45, 0x50, 0x49, 0x5f, 0x4c, 0x6c, 0x6b, 0x5f, 0x43, 0x6f,
	0x69, 0x6e, 0x10, 0x93, 0xfb, 0xe2, 0x04, 0x12, 0x0e, 0x0a, 0x07, 0x45, 0x50, 0x49, 0x5f, 0x45,
	0x78, 0x70, 0x10, 0x94, 0xfb, 0xe2, 0x04, 0x12, 0x0e, 0x0a, 0x07, 0x45, 0x50, 0x49, 0x5f, 0x4c,
	0x76, 0x6c, 0x10, 0x95, 0xfb, 0xe2, 0x04, 0x12, 0x12, 0x0a, 0x0b, 0x45, 0x50, 0x49, 0x5f, 0x43,
	0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x10, 0x96, 0xfb, 0xe2, 0x04, 0x12, 0x17, 0x0a, 0x10, 0x45,
	0x50, 0x49, 0x5f, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x10,
	0x97, 0xfb, 0xe2, 0x04, 0x12, 0x14, 0x0a, 0x0d, 0x45, 0x50, 0x49, 0x5f, 0x4c, 0x6c, 0x6b, 0x5f,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x10, 0x9a, 0xfb, 0xe2, 0x04, 0x12, 0x16, 0x0a, 0x0f, 0x45, 0x50,
	0x49, 0x5f, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x10, 0x9b, 0xfb,
	0xe2, 0x04, 0x12, 0x1a, 0x0a, 0x13, 0x45, 0x50, 0x49, 0x5f, 0x41, 0x63, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x9c, 0xfb, 0xe2, 0x04, 0x12, 0x16,
	0x0a, 0x0f, 0x45, 0x50, 0x49, 0x5f, 0x41, 0x63, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6c, 0x61,
	0x6e, 0x10, 0x9d, 0xfb, 0xe2, 0x04, 0x12, 0x19, 0x0a, 0x12, 0x45, 0x50, 0x49, 0x5f, 0x43, 0x6f,
	0x6d, 0x66, 0x6f, 0x72, 0x74, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x10, 0x8e, 0xfc, 0xe2,
	0x04, 0x12, 0x0f, 0x0a, 0x08, 0x45, 0x50, 0x49, 0x5f, 0x46, 0x61, 0x72, 0x6d, 0x10, 0xc3, 0xdc,
	0xe3, 0x2f, 0x12, 0x14, 0x0a, 0x0d, 0x45, 0x50, 0x49, 0x5f, 0x4d, 0x61, 0x69, 0x6e, 0x48, 0x6f,
	0x75, 0x73, 0x65, 0x10, 0xde, 0xdc, 0xe3, 0x2f, 0x12, 0x13, 0x0a, 0x0c, 0x45, 0x50, 0x49, 0x5f,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x10, 0xc7, 0xdc, 0xe3, 0x2f, 0x12, 0x10, 0x0a,
	0x09, 0x45, 0x50, 0x49, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x10, 0xc8, 0x8b, 0x82, 0x05, 0x12,
	0x12, 0x0a, 0x0b, 0x45, 0x50, 0x49, 0x5f, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x10, 0xc9,
	0x8b, 0x82, 0x05, 0x12, 0x14, 0x0a, 0x0d, 0x45, 0x50, 0x49, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x10, 0xa0, 0x97, 0x90, 0x13, 0x12, 0x1d, 0x0a, 0x16, 0x45, 0x50, 0x49,
	0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x90, 0xaf, 0xec, 0x17, 0x12, 0x18, 0x0a, 0x11, 0x45, 0x50, 0x49, 0x5f,
	0x57, 0x61, 0x74, 0x65, 0x72, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x61, 0x67, 0x65, 0x10, 0x94, 0xaf,
	0xec, 0x17, 0x12, 0x1d, 0x0a, 0x16, 0x45, 0x50, 0x49, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x42,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x10, 0xfe, 0xaf, 0xec,
	0x17, 0x12, 0x26, 0x0a, 0x1f, 0x45, 0x50, 0x49, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x55, 0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x43, 0x61, 0x72, 0x64, 0x10, 0xff, 0xaf, 0xec, 0x17, 0x2a, 0x6d, 0x0a, 0x0d, 0x45, 0x50, 0x6c,
	0x61, 0x6e, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x50,
	0x45, 0x49, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0a,
	0x45, 0x50, 0x45, 0x49, 0x5f, 0x57, 0x61, 0x74, 0x65, 0x72, 0x10, 0x93, 0xaf, 0xec, 0x17, 0x12,
	0x0f, 0x0a, 0x08, 0x45, 0x50, 0x45, 0x49, 0x5f, 0x52, 0x69, 0x70, 0x10, 0xa2, 0xaf, 0xec, 0x17,
	0x12, 0x10, 0x0a, 0x09, 0x45, 0x50, 0x45, 0x49, 0x5f, 0x57, 0x65, 0x65, 0x64, 0x10, 0xa4, 0xaf,
	0xec, 0x17, 0x12, 0x14, 0x0a, 0x0d, 0x45, 0x50, 0x45, 0x49, 0x5f, 0x44, 0x65, 0x49, 0x6e, 0x73,
	0x65, 0x63, 0x74, 0x10, 0xa6, 0xaf, 0xec, 0x17, 0x2a, 0x46, 0x0a, 0x0e, 0x45, 0x53, 0x63, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x53,
	0x50, 0x49, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0a,
	0x45, 0x53, 0x50, 0x49, 0x5f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0xf5, 0xfb, 0xe2, 0x04, 0x12,
	0x0f, 0x0a, 0x08, 0x45, 0x53, 0x50, 0x49, 0x5f, 0x45, 0x6e, 0x64, 0x10, 0x89, 0xfc, 0xe2, 0x04,
	0x2a, 0x46, 0x0a, 0x0c, 0x45, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x42, 0x75, 0x66, 0x66, 0x4f, 0x70,
	0x12, 0x10, 0x0a, 0x0c, 0x45, 0x50, 0x42, 0x4f, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x10, 0x00, 0x12, 0x11, 0x0a, 0x0a, 0x45, 0x50, 0x42, 0x4f, 0x5f, 0x50, 0x72, 0x75, 0x6e, 0x65,
	0x10, 0x9c, 0xd5, 0xa7, 0x0e, 0x12, 0x11, 0x0a, 0x0a, 0x45, 0x50, 0x42, 0x4f, 0x5f, 0x47, 0x72,
	0x61, 0x66, 0x74, 0x10, 0x9d, 0xd5, 0xa7, 0x0e, 0x2a, 0xf7, 0x04, 0x0a, 0x0c, 0x45, 0x54, 0x61,
	0x73, 0x6b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x54, 0x45,
	0x49, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45,
	0x54, 0x45, 0x49, 0x5f, 0x42, 0x61, 0x67, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x54, 0x45,
	0x49, 0x5f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x08,
	0x45, 0x54, 0x45, 0x49, 0x5f, 0x45, 0x78, 0x70, 0x10, 0xf8, 0x89, 0x8a, 0x13, 0x12, 0x11, 0x0a,
	0x0a, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x10, 0xf9, 0x89, 0x8a, 0x13,
	0x12, 0x11, 0x0a, 0x0a, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x50, 0x6c, 0x61, 0x6e, 0x74, 0x10, 0xfa,
	0x89, 0x8a, 0x13, 0x12, 0x13, 0x0a, 0x0c, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x48, 0x61, 0x72, 0x76,
	0x65, 0x73, 0x74, 0x10, 0xfc, 0x89, 0x8a, 0x13, 0x12, 0x13, 0x0a, 0x0c, 0x45, 0x54, 0x45, 0x49,
	0x5f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x10, 0xfe, 0x89, 0x8a, 0x13, 0x12, 0x11, 0x0a,
	0x0a, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x80, 0x8a, 0x8a, 0x13,
	0x12, 0x16, 0x0a, 0x0f, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x4c, 0x76, 0x6c, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x10, 0x81, 0x8a, 0x8a, 0x13, 0x12, 0x13, 0x0a, 0x0c, 0x45, 0x54, 0x45, 0x49,
	0x5f, 0x4f, 0x77, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x82, 0x8a, 0x8a, 0x13, 0x12, 0x15, 0x0a,
	0x0e, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x45, 0x6e, 0x64, 0x10,
	0x83, 0x8a, 0x8a, 0x13, 0x12, 0x14, 0x0a, 0x0d, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x43, 0x6f, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x84, 0x8a, 0x8a, 0x13, 0x12, 0x13, 0x0a, 0x0c, 0x45, 0x54,
	0x45, 0x49, 0x5f, 0x41, 0x64, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x10, 0x85, 0x8a, 0x8a, 0x13, 0x12,
	0x13, 0x0a, 0x0c, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x46, 0x6f, 0x72, 0x6d, 0x75, 0x6c, 0x61, 0x10,
	0x8d, 0x8a, 0x8a, 0x13, 0x12, 0x17, 0x0a, 0x10, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x10, 0x8e, 0x8a, 0x8a, 0x13, 0x12, 0x16, 0x0a,
	0x0f, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x53, 0x63, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4f, 0x70, 0x74,
	0x10, 0x8f, 0x8a, 0x8a, 0x13, 0x12, 0x19, 0x0a, 0x12, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x44, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x90, 0x8a, 0x8a, 0x13,
	0x12, 0x15, 0x0a, 0x0e, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x50, 0x65, 0x74, 0x41, 0x73, 0x73, 0x69,
	0x67, 0x6e, 0x10, 0x99, 0x8a, 0x8a, 0x13, 0x12, 0x12, 0x0a, 0x0b, 0x45, 0x54, 0x45, 0x49, 0x5f,
	0x47, 0x6f, 0x74, 0x50, 0x65, 0x74, 0x10, 0x9d, 0x8a, 0x8a, 0x13, 0x12, 0x16, 0x0a, 0x0f, 0x45,
	0x54, 0x45, 0x49, 0x5f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x9e,
	0x8a, 0x8a, 0x13, 0x12, 0x16, 0x0a, 0x0f, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x50, 0x65, 0x74, 0x55,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x9f, 0x8a, 0x8a, 0x13, 0x12, 0x17, 0x0a, 0x10, 0x45,
	0x54, 0x45, 0x49, 0x5f, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10,
	0xa0, 0x8a, 0x8a, 0x13, 0x12, 0x17, 0x0a, 0x10, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x44, 0x65, 0x63,
	0x6f, 0x72, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x10, 0xa1, 0x8a, 0x8a, 0x13, 0x12, 0x17, 0x0a,
	0x10, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x44, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6d, 0x10, 0xa2, 0x8a, 0x8a, 0x13, 0x12, 0x15, 0x0a, 0x0e, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6e, 0x64, 0x10, 0xa3, 0x8a, 0x8a, 0x13, 0x12, 0x17, 0x0a,
	0x10, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x10, 0xa4, 0x8a, 0x8a, 0x13, 0x12, 0x1a, 0x0a, 0x13, 0x45, 0x54, 0x45, 0x49, 0x5f, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xa5, 0x8a,
	0x8a, 0x13, 0x2a, 0x5d, 0x0a, 0x12, 0x45, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x43, 0x52, 0x54,
	0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x43, 0x52, 0x54, 0x5f,
	0x44, 0x61, 0x79, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x43, 0x52, 0x54, 0x5f, 0x57, 0x65,
	0x65, 0x6b, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x43, 0x52, 0x54, 0x5f, 0x4d, 0x6f, 0x6e,
	0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x43, 0x52, 0x54, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x10,
	0x04, 0x2a, 0x40, 0x0a, 0x0b, 0x45, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x54, 0x53, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x54, 0x53, 0x5f, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x54, 0x53, 0x5f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x65,
	0x64, 0x10, 0x02, 0x2a, 0x5e, 0x0a, 0x0c, 0x45, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x54, 0x52, 0x54, 0x5f, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x52, 0x54, 0x5f, 0x44, 0x61, 0x79, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x45, 0x54, 0x52, 0x54, 0x5f, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x45, 0x54, 0x52, 0x54, 0x5f, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x03, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x54, 0x52, 0x54, 0x5f, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x57, 0x65, 0x65,
	0x6b, 0x10, 0x04, 0x2a, 0x51, 0x0a, 0x0b, 0x45, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x50, 0x4f, 0x49, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x11, 0x45, 0x50, 0x4f, 0x49, 0x5f, 0x41, 0x63, 0x74,
	0x5f, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x10, 0xe8, 0x07, 0x12, 0x18, 0x0a, 0x13,
	0x45, 0x50, 0x4f, 0x49, 0x5f, 0x41, 0x63, 0x74, 0x5f, 0x4c, 0x76, 0x6c, 0x55, 0x70, 0x67, 0x72,
	0x61, 0x64, 0x65, 0x10, 0xd0, 0x0f, 0x2a, 0x78, 0x0a, 0x08, 0x45, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x49, 0x64, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x46, 0x49, 0x5f, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x46, 0x49, 0x5f, 0x44, 0x61, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x45, 0x46, 0x49, 0x5f, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x46, 0x49, 0x5f, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x46,
	0x49, 0x5f, 0x44, 0x61, 0x79, 0x30, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x46, 0x49, 0x5f,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x32, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e,
	0x45, 0x46, 0x49, 0x5f, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x34, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x06,
	0x42, 0x0d, 0x5a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_common_proto_goTypes = []interface{}{
	(ECommon)(0),            // 0: model.ECommon
	(EBuildingType)(0),      // 1: model.EBuildingType
	(ETaskId)(0),            // 2: model.ETaskId
	(EPetBufferBase)(0),     // 3: model.EPetBufferBase
	(EPropId)(0),            // 4: model.EPropId
	(EPlantEventId)(0),      // 5: model.EPlantEventId
	(ESciencePropId)(0),     // 6: model.ESciencePropId
	(EPlantBuffOp)(0),       // 7: model.EPlantBuffOp
	(ETaskEventId)(0),       // 8: model.ETaskEventId
	(ECommonRefreshType)(0), // 9: model.ECommonRefreshType
	(ETaskStatus)(0),        // 10: model.ETaskStatus
	(ERefreshType)(0),       // 11: model.ERefreshType
	(EUserOperId)(0),        // 12: model.EUserOperId
	(EFlushId)(0),           // 13: model.EFlushId
}
var file_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}

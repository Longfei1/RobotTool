//公用的proto文件，业务无关的一些通用消息

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.0--rc1
// source: msg.proto

package pbgo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// protoc --proto_path=./pb --go_out=./pbgo --go_opt=paths=source_relative ./pb/msg.proto
// 错误码
type STATUS int32

const (
	// 0~99, 通用错误码
	STATUS_OK                                  STATUS = 0
	STATUS_UNKNOWN_ERROR                       STATUS = 1    // 未知错误
	STATUS_NOT_AUTH                            STATUS = 2    // 需要重新认证
	STATUS_TOKEN_INVALID                       STATUS = 3    // token错误
	STATUS_PLAYER_NOT_FOUND                    STATUS = 4    // 没找到玩家信息
	STATUS_REDIRECT                            STATUS = 5    // 需要用户重连到另外的服务器
	STATUS_IDLE_TIMEOUT                        STATUS = 6    //闲置时间过长
	STATUS_DUP_LOGIN                           STATUS = 7    //重复登录
	STATUS_PARAM_ERROR                         STATUS = 8    //参数错误
	STATUS_SERVER_CLOSED                       STATUS = 9    //服务器已经关闭
	STATUS_SYSTEM_ERR                          STATUS = 10   //系统错误，数据库等保存出错
	STATUS_SCORE_LIMIT                         STATUS = 11   //作弊分数超过指定分数
	STATUS_BUILDING_NOT_FOUND                  STATUS = 101  //未找到该建筑
	STATUS_BUILDING_STATUS_STARTING            STATUS = 102  //建筑还在建筑中
	STATUS_BUILDING_CAN_NOT_PUT                STATUS = 103  //建筑不能放下
	STATUS_BUILDING_CAN_NOT_REMOVE             STATUS = 104  //非装饰建筑，不能移除
	STATUS_BUILDING_CAN_NOT_ADD                STATUS = 105  //非装饰建筑，不能增加
	STATUS_BUILDING_COMFORT_LIMIT              STATUS = 106  //超过舒适度上限
	STATUS_BUILDING_USER_LVL_LIMIT             STATUS = 107  //玩家等级不够建造该建筑
	STATUS_BUILDING_NUM_LIMIT                  STATUS = 108  //同类建筑数量限制
	STATUS_BUILDING_COMFORT_ENOUGH             STATUS = 109  //当前舒适度未达到条件
	STATUS_PLANT_ATTACH_BUILDING_NOT_FOUND     STATUS = 201  //未找到植物的依附
	STATUS_PLANT_ATTACH_BUILDING_TYPE_ERR      STATUS = 202  //依赖的建筑类型不对
	STATUS_PLANT_ATTACH_BUILDING_HAVE_ATTACHED STATUS = 203  //依附的建筑已被其他植物依附
	STATUS_PLANT_NOT_FOUND                     STATUS = 204  //未找到植物
	STATUS_PLANT_NOT_MATURE                    STATUS = 205  //该植物未成熟，不能收获
	STATUS_PLANT_PRUNE_STEP_ERR                STATUS = 206  //剪枝次数只能在含苞期 成熟期
	STATUS_PLANT_PRUNE_TIME_ZERO               STATUS = 207  //剪枝次数为0，不能剪枝
	STATUS_PLANT_GRAFT_STEP_ERR                STATUS = 208  //嫁接只能在含包期之后
	STATUS_PLANT_NOT_FOUND_CAN_DE_BUFFER       STATUS = 209  //没找到可debuffer的id
	STATUS_PLANT_ALREADY_DE_BUFFER             STATUS = 210  //已debuffer
	STATUS_ITEM_NOT_FOUND                      STATUS = 301  //未找到物品(道具)
	STATUS_PROP_NOT_FOUND                      STATUS = 401  //未找到道具
	STATUS_PROP_NOT_ENOUGH                     STATUS = 402  //道具数量不足
	STATUS_ORDER_NOT_FOUND                     STATUS = 501  //未找到订单
	STATUS_ORDER_SUBMIT_CD                     STATUS = 502  //订单提交cd未到
	STATUS_WAREHOUSE_CAPACITY_ERR              STATUS = 601  //仓库容量不够
	STATUS_PRODUCT_NOT_FOUND                   STATUS = 701  //未找到生产的物品
	STATUS_PRODUCT_NOT_END                     STATUS = 702  //生产未结束
	STATUS_CHANGE_NICK_CD_ERR                  STATUS = 802  //改名cd没到
	STATUS_SHOP_EXCEED_LIMIT                   STATUS = 901  //商店购买超过限量
	STATUS_TASK_REWARDED                       STATUS = 1001 //任务奖励已领取
	STATUS_TASK_COND_NOT_COM                   STATUS = 1002 //任务条件未完成
	STATUS_TASK_PRE_NOT_COM                    STATUS = 1003 //前置任务条件未完成或者未领取
	STATUS_FORMULA_NOT_MATCH                   STATUS = 1101 //没找到匹配的配方
	STATUS_DELIVERY_GOODS_ALREADY_LOAD         STATUS = 1201 //该货车的指定货物已装车
	STATUS_DELIVERY_CARGO_FIN                  STATUS = 1202 //该货车已结束
	STATUS_DELIVERY_CARGO_NOT_FIN              STATUS = 1203 //该货车未结束
	STATUS_DELIVERY_GOODS_ALREADY_REWARD       STATUS = 1204 //该货车的已领取奖励
	STATUS_DELIVERY_CARGO_STARTED              STATUS = 1205 //该货车已发车
	STATUS_XIAO_XIAO_LE_MATCH_TIME_OUT         STATUS = 1305 //匹配超时
	STATUS_XIAO_XIAO_LE_GAME_END               STATUS = 1306 //游戏已结束  5. 游戏中掉线，回来一直不操作，游戏结束后再点确认，后台直接返回游戏已结束的错误码
	STATUS_ACTIVITY_LVL_NOT_MET                STATUS = 1401 // 玩家等级未达到条件
	STATUS_ACTIVITY_NOT_IN_TIME                STATUS = 1402 // 不在活动时间内
	STATUS_EXCHANGE_CODE_INVALID               STATUS = 1410 // 兑换码-无效兑换码
	STATUS_EXCHANGE_CODE_EXPIRE                STATUS = 1411 // 兑换码-兑换码已失效（过期）
	STATUS_EXCHANGE_CODE_TIME_NOT_OPEN         STATUS = 1412 // 兑换码-兑换码未开启
	STATUS_EXCHANGE_CODE_USED                  STATUS = 1413 // 兑换码-已被使用
	STATUS_EXCHANGE_CODE_BATCH_COUNT_LIMIT     STATUS = 1414 // 兑换码-批次(期数)使用数量限制
	STATUS_SMALL_GAME_NOT_OPEN                 STATUS = 1420 // 小游戏未开放
	STATUS_SMALL_GAME_IN_GAME                  STATUS = 1421 // 已经在小游戏中（包括匹配状态）
	STATUS_SMALL_GAME_NOT_IN_GAME              STATUS = 1422 // 未在小游戏中(进行游戏操作，但不在游戏状态)
	STATUS_SMALL_GAME_OVER                     STATUS = 1423 // 小游戏已结束(进行游戏操作，但游戏已结束)
)

// Enum value maps for STATUS.
var (
	STATUS_name = map[int32]string{
		0:    "OK",
		1:    "UNKNOWN_ERROR",
		2:    "NOT_AUTH",
		3:    "TOKEN_INVALID",
		4:    "PLAYER_NOT_FOUND",
		5:    "REDIRECT",
		6:    "IDLE_TIMEOUT",
		7:    "DUP_LOGIN",
		8:    "PARAM_ERROR",
		9:    "SERVER_CLOSED",
		10:   "SYSTEM_ERR",
		11:   "SCORE_LIMIT",
		101:  "BUILDING_NOT_FOUND",
		102:  "BUILDING_STATUS_STARTING",
		103:  "BUILDING_CAN_NOT_PUT",
		104:  "BUILDING_CAN_NOT_REMOVE",
		105:  "BUILDING_CAN_NOT_ADD",
		106:  "BUILDING_COMFORT_LIMIT",
		107:  "BUILDING_USER_LVL_LIMIT",
		108:  "BUILDING_NUM_LIMIT",
		109:  "BUILDING_COMFORT_ENOUGH",
		201:  "PLANT_ATTACH_BUILDING_NOT_FOUND",
		202:  "PLANT_ATTACH_BUILDING_TYPE_ERR",
		203:  "PLANT_ATTACH_BUILDING_HAVE_ATTACHED",
		204:  "PLANT_NOT_FOUND",
		205:  "PLANT_NOT_MATURE",
		206:  "PLANT_PRUNE_STEP_ERR",
		207:  "PLANT_PRUNE_TIME_ZERO",
		208:  "PLANT_GRAFT_STEP_ERR",
		209:  "PLANT_NOT_FOUND_CAN_DE_BUFFER",
		210:  "PLANT_ALREADY_DE_BUFFER",
		301:  "ITEM_NOT_FOUND",
		401:  "PROP_NOT_FOUND",
		402:  "PROP_NOT_ENOUGH",
		501:  "ORDER_NOT_FOUND",
		502:  "ORDER_SUBMIT_CD",
		601:  "WAREHOUSE_CAPACITY_ERR",
		701:  "PRODUCT_NOT_FOUND",
		702:  "PRODUCT_NOT_END",
		802:  "CHANGE_NICK_CD_ERR",
		901:  "SHOP_EXCEED_LIMIT",
		1001: "TASK_REWARDED",
		1002: "TASK_COND_NOT_COM",
		1003: "TASK_PRE_NOT_COM",
		1101: "FORMULA_NOT_MATCH",
		1201: "DELIVERY_GOODS_ALREADY_LOAD",
		1202: "DELIVERY_CARGO_FIN",
		1203: "DELIVERY_CARGO_NOT_FIN",
		1204: "DELIVERY_GOODS_ALREADY_REWARD",
		1205: "DELIVERY_CARGO_STARTED",
		1305: "XIAO_XIAO_LE_MATCH_TIME_OUT",
		1306: "XIAO_XIAO_LE_GAME_END",
		1401: "ACTIVITY_LVL_NOT_MET",
		1402: "ACTIVITY_NOT_IN_TIME",
		1410: "EXCHANGE_CODE_INVALID",
		1411: "EXCHANGE_CODE_EXPIRE",
		1412: "EXCHANGE_CODE_TIME_NOT_OPEN",
		1413: "EXCHANGE_CODE_USED",
		1414: "EXCHANGE_CODE_BATCH_COUNT_LIMIT",
		1420: "SMALL_GAME_NOT_OPEN",
		1421: "SMALL_GAME_IN_GAME",
		1422: "SMALL_GAME_NOT_IN_GAME",
		1423: "SMALL_GAME_OVER",
	}
	STATUS_value = map[string]int32{
		"OK":                                  0,
		"UNKNOWN_ERROR":                       1,
		"NOT_AUTH":                            2,
		"TOKEN_INVALID":                       3,
		"PLAYER_NOT_FOUND":                    4,
		"REDIRECT":                            5,
		"IDLE_TIMEOUT":                        6,
		"DUP_LOGIN":                           7,
		"PARAM_ERROR":                         8,
		"SERVER_CLOSED":                       9,
		"SYSTEM_ERR":                          10,
		"SCORE_LIMIT":                         11,
		"BUILDING_NOT_FOUND":                  101,
		"BUILDING_STATUS_STARTING":            102,
		"BUILDING_CAN_NOT_PUT":                103,
		"BUILDING_CAN_NOT_REMOVE":             104,
		"BUILDING_CAN_NOT_ADD":                105,
		"BUILDING_COMFORT_LIMIT":              106,
		"BUILDING_USER_LVL_LIMIT":             107,
		"BUILDING_NUM_LIMIT":                  108,
		"BUILDING_COMFORT_ENOUGH":             109,
		"PLANT_ATTACH_BUILDING_NOT_FOUND":     201,
		"PLANT_ATTACH_BUILDING_TYPE_ERR":      202,
		"PLANT_ATTACH_BUILDING_HAVE_ATTACHED": 203,
		"PLANT_NOT_FOUND":                     204,
		"PLANT_NOT_MATURE":                    205,
		"PLANT_PRUNE_STEP_ERR":                206,
		"PLANT_PRUNE_TIME_ZERO":               207,
		"PLANT_GRAFT_STEP_ERR":                208,
		"PLANT_NOT_FOUND_CAN_DE_BUFFER":       209,
		"PLANT_ALREADY_DE_BUFFER":             210,
		"ITEM_NOT_FOUND":                      301,
		"PROP_NOT_FOUND":                      401,
		"PROP_NOT_ENOUGH":                     402,
		"ORDER_NOT_FOUND":                     501,
		"ORDER_SUBMIT_CD":                     502,
		"WAREHOUSE_CAPACITY_ERR":              601,
		"PRODUCT_NOT_FOUND":                   701,
		"PRODUCT_NOT_END":                     702,
		"CHANGE_NICK_CD_ERR":                  802,
		"SHOP_EXCEED_LIMIT":                   901,
		"TASK_REWARDED":                       1001,
		"TASK_COND_NOT_COM":                   1002,
		"TASK_PRE_NOT_COM":                    1003,
		"FORMULA_NOT_MATCH":                   1101,
		"DELIVERY_GOODS_ALREADY_LOAD":         1201,
		"DELIVERY_CARGO_FIN":                  1202,
		"DELIVERY_CARGO_NOT_FIN":              1203,
		"DELIVERY_GOODS_ALREADY_REWARD":       1204,
		"DELIVERY_CARGO_STARTED":              1205,
		"XIAO_XIAO_LE_MATCH_TIME_OUT":         1305,
		"XIAO_XIAO_LE_GAME_END":               1306,
		"ACTIVITY_LVL_NOT_MET":                1401,
		"ACTIVITY_NOT_IN_TIME":                1402,
		"EXCHANGE_CODE_INVALID":               1410,
		"EXCHANGE_CODE_EXPIRE":                1411,
		"EXCHANGE_CODE_TIME_NOT_OPEN":         1412,
		"EXCHANGE_CODE_USED":                  1413,
		"EXCHANGE_CODE_BATCH_COUNT_LIMIT":     1414,
		"SMALL_GAME_NOT_OPEN":                 1420,
		"SMALL_GAME_IN_GAME":                  1421,
		"SMALL_GAME_NOT_IN_GAME":              1422,
		"SMALL_GAME_OVER":                     1423,
	}
)

func (x STATUS) Enum() *STATUS {
	p := new(STATUS)
	*p = x
	return p
}

func (x STATUS) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (STATUS) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_proto_enumTypes[0].Descriptor()
}

func (STATUS) Type() protoreflect.EnumType {
	return &file_msg_proto_enumTypes[0]
}

func (x STATUS) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use STATUS.Descriptor instead.
func (STATUS) EnumDescriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

// 对时，服务端存活探测探测, id=10000
type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{0}
}

func (x *Ping) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 对时，服务端返回当前时间，id=10001
type Pong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64 `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *Pong) Reset() {
	*x = Pong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pong) ProtoMessage() {}

func (x *Pong) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pong.ProtoReflect.Descriptor instead.
func (*Pong) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{1}
}

func (x *Pong) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// 错误信息，id: 100
type ErrorST struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64  `protobuf:"varint,1,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"` //毫秒级时间戳，下同
	Status    STATUS `protobuf:"varint,2,opt,name=Status,proto3,enum=msg.STATUS" json:"Status,omitempty"`
	Msg       string `protobuf:"bytes,3,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (x *ErrorST) Reset() {
	*x = ErrorST{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorST) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorST) ProtoMessage() {}

func (x *ErrorST) ProtoReflect() protoreflect.Message {
	mi := &file_msg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorST.ProtoReflect.Descriptor instead.
func (*ErrorST) Descriptor() ([]byte, []int) {
	return file_msg_proto_rawDescGZIP(), []int{2}
}

func (x *ErrorST) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ErrorST) GetStatus() STATUS {
	if x != nil {
		return x.Status
	}
	return STATUS_OK
}

func (x *ErrorST) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_msg_proto protoreflect.FileDescriptor

var file_msg_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x24, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x24, 0x0a, 0x04, 0x50, 0x6f, 0x6e, 0x67, 0x12, 0x1c,
	0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5e, 0x0a, 0x07,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x54, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0b, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73, 0x67, 0x2a, 0xc7, 0x0c, 0x0a,
	0x06, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x4c, 0x41, 0x59, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x44,
	0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x44, 0x4c, 0x45, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x55, 0x50,
	0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x52,
	0x56, 0x45, 0x52, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b,
	0x53, 0x43, 0x4f, 0x52, 0x45, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x0b, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x66, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x43, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x55, 0x54, 0x10, 0x67, 0x12, 0x1b, 0x0a,
	0x17, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x68, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41,
	0x44, 0x44, 0x10, 0x69, 0x12, 0x1a, 0x0a, 0x16, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x43, 0x4f, 0x4d, 0x46, 0x4f, 0x52, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x6a,
	0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x4c, 0x56, 0x4c, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x6b, 0x12, 0x16, 0x0a,
	0x12, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x55, 0x4d, 0x5f, 0x4c, 0x49,
	0x4d, 0x49, 0x54, 0x10, 0x6c, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x46, 0x4f, 0x52, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48,
	0x10, 0x6d, 0x12, 0x24, 0x0a, 0x1f, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x48, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xc9, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x50, 0x4c, 0x41, 0x4e,
	0x54, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xca, 0x01, 0x12, 0x28, 0x0a,
	0x23, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x5f, 0x42, 0x55,
	0x49, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x48, 0x45, 0x44, 0x10, 0xcb, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x4c, 0x41, 0x4e, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xcc, 0x01, 0x12, 0x15, 0x0a,
	0x10, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x10, 0xcd, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x52,
	0x55, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xce, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x55, 0x4e, 0x45, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0xcf, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x50,
	0x4c, 0x41, 0x4e, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x45, 0x50, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0xd0, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x44, 0x45,
	0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x10, 0xd1, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x50, 0x4c,
	0x41, 0x4e, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x44, 0x45, 0x5f, 0x42,
	0x55, 0x46, 0x46, 0x45, 0x52, 0x10, 0xd2, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x49, 0x54, 0x45, 0x4d,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xad, 0x02, 0x12, 0x13, 0x0a,
	0x0e, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x91, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45,
	0x4e, 0x4f, 0x55, 0x47, 0x48, 0x10, 0x92, 0x03, 0x12, 0x14, 0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xf5, 0x03, 0x12, 0x14,
	0x0a, 0x0f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x42, 0x4d, 0x49, 0x54, 0x5f, 0x43,
	0x44, 0x10, 0xf6, 0x03, 0x12, 0x1b, 0x0a, 0x16, 0x57, 0x41, 0x52, 0x45, 0x48, 0x4f, 0x55, 0x53,
	0x45, 0x5f, 0x43, 0x41, 0x50, 0x41, 0x43, 0x49, 0x54, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xd9,
	0x04, 0x12, 0x16, 0x0a, 0x11, 0x50, 0x52, 0x4f, 0x44, 0x55, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0xbd, 0x05, 0x12, 0x14, 0x0a, 0x0f, 0x50, 0x52, 0x4f,
	0x44, 0x55, 0x43, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0xbe, 0x05, 0x12,
	0x17, 0x0a, 0x12, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4e, 0x49, 0x43, 0x4b, 0x5f, 0x43,
	0x44, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xa2, 0x06, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x48, 0x4f, 0x50,
	0x5f, 0x45, 0x58, 0x43, 0x45, 0x45, 0x44, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x85, 0x07,
	0x12, 0x12, 0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x45, 0x57, 0x41, 0x52, 0x44, 0x45,
	0x44, 0x10, 0xe9, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4e,
	0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x10, 0xea, 0x07, 0x12, 0x15, 0x0a, 0x10,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x50, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d,
	0x10, 0xeb, 0x07, 0x12, 0x16, 0x0a, 0x11, 0x46, 0x4f, 0x52, 0x4d, 0x55, 0x4c, 0x41, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0xcd, 0x08, 0x12, 0x20, 0x0a, 0x1b, 0x44,
	0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x47, 0x4f, 0x4f, 0x44, 0x53, 0x5f, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0xb1, 0x09, 0x12, 0x17, 0x0a,
	0x12, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x47, 0x4f, 0x5f,
	0x46, 0x49, 0x4e, 0x10, 0xb2, 0x09, 0x12, 0x1b, 0x0a, 0x16, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45,
	0x52, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x47, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x4e,
	0x10, 0xb3, 0x09, 0x12, 0x22, 0x0a, 0x1d, 0x44, 0x45, 0x4c, 0x49, 0x56, 0x45, 0x52, 0x59, 0x5f,
	0x47, 0x4f, 0x4f, 0x44, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x52, 0x45,
	0x57, 0x41, 0x52, 0x44, 0x10, 0xb4, 0x09, 0x12, 0x1b, 0x0a, 0x16, 0x44, 0x45, 0x4c, 0x49, 0x56,
	0x45, 0x52, 0x59, 0x5f, 0x43, 0x41, 0x52, 0x47, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45,
	0x44, 0x10, 0xb5, 0x09, 0x12, 0x20, 0x0a, 0x1b, 0x58, 0x49, 0x41, 0x4f, 0x5f, 0x58, 0x49, 0x41,
	0x4f, 0x5f, 0x4c, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x4f, 0x55, 0x54, 0x10, 0x99, 0x0a, 0x12, 0x1a, 0x0a, 0x15, 0x58, 0x49, 0x41, 0x4f, 0x5f, 0x58,
	0x49, 0x41, 0x4f, 0x5f, 0x4c, 0x45, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x10,
	0x9a, 0x0a, 0x12, 0x19, 0x0a, 0x14, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4c,
	0x56, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x10, 0xf9, 0x0a, 0x12, 0x19, 0x0a,
	0x14, 0x41, 0x43, 0x54, 0x49, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0xfa, 0x0a, 0x12, 0x1a, 0x0a, 0x15, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x10, 0x82, 0x0b, 0x12, 0x19, 0x0a, 0x14, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x10, 0x83, 0x0b, 0x12,
	0x20, 0x0a, 0x1b, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x84,
	0x0b, 0x12, 0x17, 0x0a, 0x12, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f,
	0x44, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x85, 0x0b, 0x12, 0x24, 0x0a, 0x1f, 0x45, 0x58,
	0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x43,
	0x48, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x86, 0x0b,
	0x12, 0x18, 0x0a, 0x13, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x8c, 0x0b, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x4d,
	0x41, 0x4c, 0x4c, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45,
	0x10, 0x8d, 0x0b, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x47, 0x41, 0x4d,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x10, 0x8e, 0x0b,
	0x12, 0x14, 0x0a, 0x0f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x5f, 0x47, 0x41, 0x4d, 0x45, 0x5f, 0x4f,
	0x56, 0x45, 0x52, 0x10, 0x8f, 0x0b, 0x42, 0x0d, 0x5a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x70, 0x62, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msg_proto_rawDescOnce sync.Once
	file_msg_proto_rawDescData = file_msg_proto_rawDesc
)

func file_msg_proto_rawDescGZIP() []byte {
	file_msg_proto_rawDescOnce.Do(func() {
		file_msg_proto_rawDescData = protoimpl.X.CompressGZIP(file_msg_proto_rawDescData)
	})
	return file_msg_proto_rawDescData
}

var file_msg_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_msg_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_msg_proto_goTypes = []interface{}{
	(STATUS)(0),     // 0: msg.STATUS
	(*Ping)(nil),    // 1: msg.Ping
	(*Pong)(nil),    // 2: msg.Pong
	(*ErrorST)(nil), // 3: msg.ErrorST
}
var file_msg_proto_depIdxs = []int32{
	0, // 0: msg.ErrorST.Status:type_name -> msg.STATUS
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_msg_proto_init() }
func file_msg_proto_init() {
	if File_msg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorST); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msg_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msg_proto_goTypes,
		DependencyIndexes: file_msg_proto_depIdxs,
		EnumInfos:         file_msg_proto_enumTypes,
		MessageInfos:      file_msg_proto_msgTypes,
	}.Build()
	File_msg_proto = out.File
	file_msg_proto_rawDesc = nil
	file_msg_proto_goTypes = nil
	file_msg_proto_depIdxs = nil
}

// protoc --proto_path=./pb --go_out=./pbgo --go_opt=paths=source_relative ./pb/activity.proto
// protoc-go-inject-tag -input="./pbgo/activity.pb.go"
// goctl model mongo -e -dir ./model -t Activity --home template -c
//!!!!!!! 删除生成的worldtypes, 代码成替换成model对象

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.0--rc1
// source: activity.proto

package pbgo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EActivityType int32

const (
	EActivityType_EAT_Invalid           EActivityType = 0
	EActivityType_EAT_PersonalCharge    EActivityType = 1  // 个人累充
	EActivityType_EAT_GlobalCharge      EActivityType = 2  // 全服累充
	EActivityType_EAT_LevelUpgrade      EActivityType = 3  // 冲级活动
	EActivityType_EAT_TaskPlan          EActivityType = 4  // 战令
	EActivityType_EAT_SevenDaySign      EActivityType = 5  // 七日签到
	EActivityType_EAT_SuperRechargeGift EActivityType = 6  // 超值充值礼包
	EActivityType_EAT_TimeLimitedTask   EActivityType = 7  // 限时任务
	EActivityType_EAT_DailyTask         EActivityType = 8  // 每日任务
	EActivityType_EAT_GlobalRebate      EActivityType = 9  //全民返利
	EActivityType_EAT_TriggerGift       EActivityType = 10 // 精细化礼包（触发式礼包）
	EActivityType_EAT_FoundationInvest  EActivityType = 11 //基金投资
	EActivityType_EAT_ExchangeCodeGift  EActivityType = 12 //兑换码礼包
	EActivityType_EAT_Max               EActivityType = 13
)

// Enum value maps for EActivityType.
var (
	EActivityType_name = map[int32]string{
		0:  "EAT_Invalid",
		1:  "EAT_PersonalCharge",
		2:  "EAT_GlobalCharge",
		3:  "EAT_LevelUpgrade",
		4:  "EAT_TaskPlan",
		5:  "EAT_SevenDaySign",
		6:  "EAT_SuperRechargeGift",
		7:  "EAT_TimeLimitedTask",
		8:  "EAT_DailyTask",
		9:  "EAT_GlobalRebate",
		10: "EAT_TriggerGift",
		11: "EAT_FoundationInvest",
		12: "EAT_ExchangeCodeGift",
		13: "EAT_Max",
	}
	EActivityType_value = map[string]int32{
		"EAT_Invalid":           0,
		"EAT_PersonalCharge":    1,
		"EAT_GlobalCharge":      2,
		"EAT_LevelUpgrade":      3,
		"EAT_TaskPlan":          4,
		"EAT_SevenDaySign":      5,
		"EAT_SuperRechargeGift": 6,
		"EAT_TimeLimitedTask":   7,
		"EAT_DailyTask":         8,
		"EAT_GlobalRebate":      9,
		"EAT_TriggerGift":       10,
		"EAT_FoundationInvest":  11,
		"EAT_ExchangeCodeGift":  12,
		"EAT_Max":               13,
	}
)

func (x EActivityType) Enum() *EActivityType {
	p := new(EActivityType)
	*p = x
	return p
}

func (x EActivityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EActivityType) Descriptor() protoreflect.EnumDescriptor {
	return file_activity_proto_enumTypes[0].Descriptor()
}

func (EActivityType) Type() protoreflect.EnumType {
	return &file_activity_proto_enumTypes[0]
}

func (x EActivityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EActivityType.Descriptor instead.
func (EActivityType) EnumDescriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{0}
}

type ActDataPersonalCharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"hasGot"
	HasGot []bool `protobuf:"varint,1,rep,packed,name=hasGot,proto3" json:"hasGot,omitempty"`
}

func (x *ActDataPersonalCharge) Reset() {
	*x = ActDataPersonalCharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActDataPersonalCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActDataPersonalCharge) ProtoMessage() {}

func (x *ActDataPersonalCharge) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActDataPersonalCharge.ProtoReflect.Descriptor instead.
func (*ActDataPersonalCharge) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{0}
}

func (x *ActDataPersonalCharge) GetHasGot() []bool {
	if x != nil {
		return x.HasGot
	}
	return nil
}

type ActDataGlobalCharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"hasGot"
	HasGot []bool `protobuf:"varint,1,rep,packed,name=hasGot,proto3" json:"hasGot,omitempty"`
}

func (x *ActDataGlobalCharge) Reset() {
	*x = ActDataGlobalCharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActDataGlobalCharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActDataGlobalCharge) ProtoMessage() {}

func (x *ActDataGlobalCharge) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActDataGlobalCharge.ProtoReflect.Descriptor instead.
func (*ActDataGlobalCharge) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{1}
}

func (x *ActDataGlobalCharge) GetHasGot() []bool {
	if x != nil {
		return x.HasGot
	}
	return nil
}

type ActDataLevelUpgrade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"extraUnlock"
	ExtraUnlock bool `protobuf:"varint,1,opt,name=extraUnlock,proto3" json:"extraUnlock,omitempty"`
	// @inject_tag: bson:"hasGot"
	HasGot []bool `protobuf:"varint,2,rep,packed,name=hasGot,proto3" json:"hasGot,omitempty"`
	// @inject_tag: bson:"extraHasGot"
	ExtraHasGot []bool `protobuf:"varint,3,rep,packed,name=extraHasGot,proto3" json:"extraHasGot,omitempty"`
}

func (x *ActDataLevelUpgrade) Reset() {
	*x = ActDataLevelUpgrade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActDataLevelUpgrade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActDataLevelUpgrade) ProtoMessage() {}

func (x *ActDataLevelUpgrade) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActDataLevelUpgrade.ProtoReflect.Descriptor instead.
func (*ActDataLevelUpgrade) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{2}
}

func (x *ActDataLevelUpgrade) GetExtraUnlock() bool {
	if x != nil {
		return x.ExtraUnlock
	}
	return false
}

func (x *ActDataLevelUpgrade) GetHasGot() []bool {
	if x != nil {
		return x.HasGot
	}
	return nil
}

func (x *ActDataLevelUpgrade) GetExtraHasGot() []bool {
	if x != nil {
		return x.ExtraHasGot
	}
	return nil
}

type ActDataTaskPlanQuestItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"cfgId"
	CfgId uint32 `protobuf:"varint,1,opt,name=cfgId,proto3" json:"cfgId,omitempty"`
	// @inject_tag: bson:"hasGot"
	HasGot bool `protobuf:"varint,2,opt,name=hasGot,proto3" json:"hasGot,omitempty"`
	// @inject_tag: bson:"lastGotTime"
	LastGotTime uint32 `protobuf:"varint,3,opt,name=lastGotTime,proto3" json:"lastGotTime,omitempty"`
}

func (x *ActDataTaskPlanQuestItem) Reset() {
	*x = ActDataTaskPlanQuestItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActDataTaskPlanQuestItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActDataTaskPlanQuestItem) ProtoMessage() {}

func (x *ActDataTaskPlanQuestItem) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActDataTaskPlanQuestItem.ProtoReflect.Descriptor instead.
func (*ActDataTaskPlanQuestItem) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{3}
}

func (x *ActDataTaskPlanQuestItem) GetCfgId() uint32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *ActDataTaskPlanQuestItem) GetHasGot() bool {
	if x != nil {
		return x.HasGot
	}
	return false
}

func (x *ActDataTaskPlanQuestItem) GetLastGotTime() uint32 {
	if x != nil {
		return x.LastGotTime
	}
	return 0
}

type ActDataTaskPlanAwardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"cfgId"
	CfgId uint32 `protobuf:"varint,1,opt,name=cfgId,proto3" json:"cfgId,omitempty"`
	// @inject_tag: bson:"hasGot"
	HasGot bool `protobuf:"varint,2,opt,name=hasGot,proto3" json:"hasGot,omitempty"`
	// @inject_tag: bson:"extraHasGot"
	ExtraHasGot bool `protobuf:"varint,3,opt,name=extraHasGot,proto3" json:"extraHasGot,omitempty"`
}

func (x *ActDataTaskPlanAwardItem) Reset() {
	*x = ActDataTaskPlanAwardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActDataTaskPlanAwardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActDataTaskPlanAwardItem) ProtoMessage() {}

func (x *ActDataTaskPlanAwardItem) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActDataTaskPlanAwardItem.ProtoReflect.Descriptor instead.
func (*ActDataTaskPlanAwardItem) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{4}
}

func (x *ActDataTaskPlanAwardItem) GetCfgId() uint32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *ActDataTaskPlanAwardItem) GetHasGot() bool {
	if x != nil {
		return x.HasGot
	}
	return false
}

func (x *ActDataTaskPlanAwardItem) GetExtraHasGot() bool {
	if x != nil {
		return x.ExtraHasGot
	}
	return false
}

type ActDataTaskPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"exp"
	Exp uint32 `protobuf:"varint,1,opt,name=exp,proto3" json:"exp,omitempty"`
	// @inject_tag: bson:"extraUnlock"
	ExtraUnlock bool `protobuf:"varint,2,opt,name=extraUnlock,proto3" json:"extraUnlock,omitempty"`
	// @inject_tag: bson:"awardData"
	AwardData []*ActDataTaskPlanAwardItem `protobuf:"bytes,3,rep,name=awardData,proto3" json:"awardData,omitempty"` // 奖励领取数据
	// @inject_tag: bson:"questData"
	QuestData []*ActDataTaskPlanQuestItem `protobuf:"bytes,4,rep,name=questData,proto3" json:"questData,omitempty"` // 任务领取数据
}

func (x *ActDataTaskPlan) Reset() {
	*x = ActDataTaskPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActDataTaskPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActDataTaskPlan) ProtoMessage() {}

func (x *ActDataTaskPlan) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActDataTaskPlan.ProtoReflect.Descriptor instead.
func (*ActDataTaskPlan) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{5}
}

func (x *ActDataTaskPlan) GetExp() uint32 {
	if x != nil {
		return x.Exp
	}
	return 0
}

func (x *ActDataTaskPlan) GetExtraUnlock() bool {
	if x != nil {
		return x.ExtraUnlock
	}
	return false
}

func (x *ActDataTaskPlan) GetAwardData() []*ActDataTaskPlanAwardItem {
	if x != nil {
		return x.AwardData
	}
	return nil
}

func (x *ActDataTaskPlan) GetQuestData() []*ActDataTaskPlanQuestItem {
	if x != nil {
		return x.QuestData
	}
	return nil
}

type ActDataSevenDaySign struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"lastSignTime"
	LastSignTime uint32 `protobuf:"varint,1,opt,name=lastSignTime,proto3" json:"lastSignTime,omitempty"` //上次签到时间
	// @inject_tag: bson:"signDays"
	SignDays uint32 `protobuf:"varint,2,opt,name=signDays,proto3" json:"signDays,omitempty"` //已经签到的天数
}

func (x *ActDataSevenDaySign) Reset() {
	*x = ActDataSevenDaySign{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActDataSevenDaySign) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActDataSevenDaySign) ProtoMessage() {}

func (x *ActDataSevenDaySign) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActDataSevenDaySign.ProtoReflect.Descriptor instead.
func (*ActDataSevenDaySign) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{6}
}

func (x *ActDataSevenDaySign) GetLastSignTime() uint32 {
	if x != nil {
		return x.LastSignTime
	}
	return 0
}

func (x *ActDataSevenDaySign) GetSignDays() uint32 {
	if x != nil {
		return x.SignDays
	}
	return 0
}

type ActDataSuperRechargeGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"buyTime"
	BuyTime uint32 `protobuf:"varint,1,opt,name=buyTime,proto3" json:"buyTime,omitempty"` //购买时间
}

func (x *ActDataSuperRechargeGift) Reset() {
	*x = ActDataSuperRechargeGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActDataSuperRechargeGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActDataSuperRechargeGift) ProtoMessage() {}

func (x *ActDataSuperRechargeGift) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActDataSuperRechargeGift.ProtoReflect.Descriptor instead.
func (*ActDataSuperRechargeGift) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{7}
}

func (x *ActDataSuperRechargeGift) GetBuyTime() uint32 {
	if x != nil {
		return x.BuyTime
	}
	return 0
}

type TimeLimitedTaskItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"cfgId"
	CfgId uint32 `protobuf:"varint,1,opt,name=cfgId,proto3" json:"cfgId,omitempty"` // 对应ActTimeLimitTaskQuest中的ID   限时任务需要刷新 是否需要刷新是两个条件 1. 刷新周期，2.本周期是否做该任务，没做就不用刷新
	// @inject_tag: bson:"hasGot"
	HasGot bool `protobuf:"varint,2,opt,name=hasGot,proto3" json:"hasGot,omitempty"`
}

func (x *TimeLimitedTaskItem) Reset() {
	*x = TimeLimitedTaskItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeLimitedTaskItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeLimitedTaskItem) ProtoMessage() {}

func (x *TimeLimitedTaskItem) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeLimitedTaskItem.ProtoReflect.Descriptor instead.
func (*TimeLimitedTaskItem) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{8}
}

func (x *TimeLimitedTaskItem) GetCfgId() uint32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *TimeLimitedTaskItem) GetHasGot() bool {
	if x != nil {
		return x.HasGot
	}
	return false
}

type ActDataTimeLimitedTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"taskAwardData"
	TaskAwardData []*TimeLimitedTaskItem `protobuf:"bytes,1,rep,name=taskAwardData,proto3" json:"taskAwardData,omitempty"` // 礼包和限时任务合为一起 前2条是固定的礼包任务
	// @inject_tag: bson:"dayId"
	DayId uint32 `protobuf:"varint,2,opt,name=dayId,proto3" json:"dayId,omitempty"` // 玩家当前任务天数 这个每次加1 其实就是任务进度，每天最多可以领取1次进度
	// @inject_tag: bson:"updateDayId"
	UpdateDayId uint32 `protobuf:"varint,3,opt,name=updateDayId,proto3" json:"updateDayId,omitempty"` // 玩家上一次刷新时间的具体天数
	// @inject_tag: bson:"lastUpdate"
	LastUpdate uint32 `protobuf:"varint,4,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
}

func (x *ActDataTimeLimitedTask) Reset() {
	*x = ActDataTimeLimitedTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActDataTimeLimitedTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActDataTimeLimitedTask) ProtoMessage() {}

func (x *ActDataTimeLimitedTask) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActDataTimeLimitedTask.ProtoReflect.Descriptor instead.
func (*ActDataTimeLimitedTask) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{9}
}

func (x *ActDataTimeLimitedTask) GetTaskAwardData() []*TimeLimitedTaskItem {
	if x != nil {
		return x.TaskAwardData
	}
	return nil
}

func (x *ActDataTimeLimitedTask) GetDayId() uint32 {
	if x != nil {
		return x.DayId
	}
	return 0
}

func (x *ActDataTimeLimitedTask) GetUpdateDayId() uint32 {
	if x != nil {
		return x.UpdateDayId
	}
	return 0
}

func (x *ActDataTimeLimitedTask) GetLastUpdate() uint32 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

type ActDataDailyTask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"awardStatus"
	AwardStatus map[uint32]bool `protobuf:"bytes,1,rep,name=awardStatus,proto3" json:"awardStatus,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 领奖状态 <配置id, 是否已领取>
	// @inject_tag: bson:"lastUpdate"
	LastUpdate int64 `protobuf:"varint,2,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"` //更新时间
}

func (x *ActDataDailyTask) Reset() {
	*x = ActDataDailyTask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActDataDailyTask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActDataDailyTask) ProtoMessage() {}

func (x *ActDataDailyTask) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActDataDailyTask.ProtoReflect.Descriptor instead.
func (*ActDataDailyTask) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{10}
}

func (x *ActDataDailyTask) GetAwardStatus() map[uint32]bool {
	if x != nil {
		return x.AwardStatus
	}
	return nil
}

func (x *ActDataDailyTask) GetLastUpdate() int64 {
	if x != nil {
		return x.LastUpdate
	}
	return 0
}

type ActDataGlobalRebate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"globalAwardStatus"
	GlobalAwardStatus map[uint32]bool `protobuf:"bytes,1,rep,name=globalAwardStatus,proto3" json:"globalAwardStatus,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 领奖状态 <配置id, 是否已领取>
	// @inject_tag: bson:"personAwardStatus"
	PersonAwardStatus map[uint32]bool `protobuf:"bytes,2,rep,name=personAwardStatus,proto3" json:"personAwardStatus,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 领奖状态 <配置id, 是否已领取>
}

func (x *ActDataGlobalRebate) Reset() {
	*x = ActDataGlobalRebate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActDataGlobalRebate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActDataGlobalRebate) ProtoMessage() {}

func (x *ActDataGlobalRebate) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActDataGlobalRebate.ProtoReflect.Descriptor instead.
func (*ActDataGlobalRebate) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{11}
}

func (x *ActDataGlobalRebate) GetGlobalAwardStatus() map[uint32]bool {
	if x != nil {
		return x.GlobalAwardStatus
	}
	return nil
}

func (x *ActDataGlobalRebate) GetPersonAwardStatus() map[uint32]bool {
	if x != nil {
		return x.PersonAwardStatus
	}
	return nil
}

type DbTriggerGiftItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"cfgId"
	CfgId uint32 `protobuf:"varint,1,opt,name=cfgId,proto3" json:"cfgId,omitempty"` //对应ActTriggerGift中的ID
	// @inject_tag: bson:"triggerTime"
	TriggerTime int64 `protobuf:"varint,2,opt,name=triggerTime,proto3" json:"triggerTime,omitempty"` //上次触发时间
	// @inject_tag: bson:"endTime"
	EndTime int64 `protobuf:"varint,3,opt,name=endTime,proto3" json:"endTime,omitempty"` //结束时间（为0）
	// @inject_tag: bson:"buy"
	Buy bool `protobuf:"varint,4,opt,name=buy,proto3" json:"buy,omitempty"` //是否已购买
}

func (x *DbTriggerGiftItem) Reset() {
	*x = DbTriggerGiftItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbTriggerGiftItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbTriggerGiftItem) ProtoMessage() {}

func (x *DbTriggerGiftItem) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbTriggerGiftItem.ProtoReflect.Descriptor instead.
func (*DbTriggerGiftItem) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{12}
}

func (x *DbTriggerGiftItem) GetCfgId() uint32 {
	if x != nil {
		return x.CfgId
	}
	return 0
}

func (x *DbTriggerGiftItem) GetTriggerTime() int64 {
	if x != nil {
		return x.TriggerTime
	}
	return 0
}

func (x *DbTriggerGiftItem) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *DbTriggerGiftItem) GetBuy() bool {
	if x != nil {
		return x.Buy
	}
	return false
}

type ActDataTriggerGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"items"
	Items map[uint32]*DbTriggerGiftItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 礼包数据 <id, item>
}

func (x *ActDataTriggerGift) Reset() {
	*x = ActDataTriggerGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActDataTriggerGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActDataTriggerGift) ProtoMessage() {}

func (x *ActDataTriggerGift) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActDataTriggerGift.ProtoReflect.Descriptor instead.
func (*ActDataTriggerGift) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{13}
}

func (x *ActDataTriggerGift) GetItems() map[uint32]*DbTriggerGiftItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ActDataFoundationInvest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"awardStatus"
	AwardStatus map[uint32]bool `protobuf:"bytes,1,rep,name=awardStatus,proto3" json:"awardStatus,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 领奖状态 <配置id, 是否已领取>
	// @inject_tag: bson:"buyTime"
	BuyTime int64 `protobuf:"varint,2,opt,name=buyTime,proto3" json:"buyTime,omitempty"` // 购买时间（0表示未购买）
}

func (x *ActDataFoundationInvest) Reset() {
	*x = ActDataFoundationInvest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActDataFoundationInvest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActDataFoundationInvest) ProtoMessage() {}

func (x *ActDataFoundationInvest) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActDataFoundationInvest.ProtoReflect.Descriptor instead.
func (*ActDataFoundationInvest) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{14}
}

func (x *ActDataFoundationInvest) GetAwardStatus() map[uint32]bool {
	if x != nil {
		return x.AwardStatus
	}
	return nil
}

func (x *ActDataFoundationInvest) GetBuyTime() int64 {
	if x != nil {
		return x.BuyTime
	}
	return 0
}

type DbExchangeCodeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"codeData"
	CodeData map[string]int64 `protobuf:"bytes,1,rep,name=codeData,proto3" json:"codeData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` //兑换码
}

func (x *DbExchangeCodeRecord) Reset() {
	*x = DbExchangeCodeRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DbExchangeCodeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbExchangeCodeRecord) ProtoMessage() {}

func (x *DbExchangeCodeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbExchangeCodeRecord.ProtoReflect.Descriptor instead.
func (*DbExchangeCodeRecord) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{15}
}

func (x *DbExchangeCodeRecord) GetCodeData() map[string]int64 {
	if x != nil {
		return x.CodeData
	}
	return nil
}

type ActDataExchangeCodeGift struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @inject_tag: bson:"record"
	Record map[uint64]*DbExchangeCodeRecord `protobuf:"bytes,1,rep,name=record,proto3" json:"record,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //兑换记录 <期数, 兑换记录>
}

func (x *ActDataExchangeCodeGift) Reset() {
	*x = ActDataExchangeCodeGift{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActDataExchangeCodeGift) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActDataExchangeCodeGift) ProtoMessage() {}

func (x *ActDataExchangeCodeGift) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActDataExchangeCodeGift.ProtoReflect.Descriptor instead.
func (*ActDataExchangeCodeGift) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{16}
}

func (x *ActDataExchangeCodeGift) GetRecord() map[uint64]*DbExchangeCodeRecord {
	if x != nil {
		return x.Record
	}
	return nil
}

type Activity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// index为"uid_actType"，唯一id系统生成
	// @inject_tag: bson:"uid"
	Uid string `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	// @inject_tag: bson:"actType"
	ActType EActivityType `protobuf:"varint,2,opt,name=actType,proto3,enum=model.EActivityType" json:"actType,omitempty"`
	// @inject_tag: bson:"lastActDataClearTime"
	LastActDataClearTime uint32 `protobuf:"varint,3,opt,name=lastActDataClearTime,proto3" json:"lastActDataClearTime,omitempty"`
	// @inject_tag: bson:"seq"
	Seq uint64 `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
	// @inject_tag: bson:"periodTag"
	PeriodTag string `protobuf:"bytes,5,opt,name=periodTag,proto3" json:"periodTag,omitempty"`
	// @inject_tag: bson:"finished"
	Finished bool `protobuf:"varint,6,opt,name=finished,proto3" json:"finished,omitempty"`
	// @inject_tag: bson:"lastUpdateTime"
	LastUpdateTime int64 `protobuf:"varint,7,opt,name=lastUpdateTime,proto3" json:"lastUpdateTime,omitempty"`
	// @inject_tag: bson:"ActivityData"
	//
	// Types that are assignable to ActivityData:
	//
	//	*Activity_ActDataPersonalCharge
	//	*Activity_ActDataGlobalCharge
	//	*Activity_ActDataLevelUpgrade
	//	*Activity_ActDataTaskPlan
	//	*Activity_ActDataSevenDaySign
	//	*Activity_ActDataSuperRechargeGift
	//	*Activity_ActDataTimeLimitedTask
	//	*Activity_ActDataDailyTask
	//	*Activity_ActDataGlobalRebate
	//	*Activity_ActDataTriggerGift
	//	*Activity_ActDataFoundationInvest
	//	*Activity_ActDataExchangeCodeGift
	ActivityData isActivity_ActivityData `protobuf_oneof:"ActivityData"`
}

func (x *Activity) Reset() {
	*x = Activity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_activity_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_activity_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_activity_proto_rawDescGZIP(), []int{17}
}

func (x *Activity) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Activity) GetActType() EActivityType {
	if x != nil {
		return x.ActType
	}
	return EActivityType_EAT_Invalid
}

func (x *Activity) GetLastActDataClearTime() uint32 {
	if x != nil {
		return x.LastActDataClearTime
	}
	return 0
}

func (x *Activity) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *Activity) GetPeriodTag() string {
	if x != nil {
		return x.PeriodTag
	}
	return ""
}

func (x *Activity) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *Activity) GetLastUpdateTime() int64 {
	if x != nil {
		return x.LastUpdateTime
	}
	return 0
}

func (m *Activity) GetActivityData() isActivity_ActivityData {
	if m != nil {
		return m.ActivityData
	}
	return nil
}

func (x *Activity) GetActDataPersonalCharge() *ActDataPersonalCharge {
	if x, ok := x.GetActivityData().(*Activity_ActDataPersonalCharge); ok {
		return x.ActDataPersonalCharge
	}
	return nil
}

func (x *Activity) GetActDataGlobalCharge() *ActDataGlobalCharge {
	if x, ok := x.GetActivityData().(*Activity_ActDataGlobalCharge); ok {
		return x.ActDataGlobalCharge
	}
	return nil
}

func (x *Activity) GetActDataLevelUpgrade() *ActDataLevelUpgrade {
	if x, ok := x.GetActivityData().(*Activity_ActDataLevelUpgrade); ok {
		return x.ActDataLevelUpgrade
	}
	return nil
}

func (x *Activity) GetActDataTaskPlan() *ActDataTaskPlan {
	if x, ok := x.GetActivityData().(*Activity_ActDataTaskPlan); ok {
		return x.ActDataTaskPlan
	}
	return nil
}

func (x *Activity) GetActDataSevenDaySign() *ActDataSevenDaySign {
	if x, ok := x.GetActivityData().(*Activity_ActDataSevenDaySign); ok {
		return x.ActDataSevenDaySign
	}
	return nil
}

func (x *Activity) GetActDataSuperRechargeGift() *ActDataSuperRechargeGift {
	if x, ok := x.GetActivityData().(*Activity_ActDataSuperRechargeGift); ok {
		return x.ActDataSuperRechargeGift
	}
	return nil
}

func (x *Activity) GetActDataTimeLimitedTask() *ActDataTimeLimitedTask {
	if x, ok := x.GetActivityData().(*Activity_ActDataTimeLimitedTask); ok {
		return x.ActDataTimeLimitedTask
	}
	return nil
}

func (x *Activity) GetActDataDailyTask() *ActDataDailyTask {
	if x, ok := x.GetActivityData().(*Activity_ActDataDailyTask); ok {
		return x.ActDataDailyTask
	}
	return nil
}

func (x *Activity) GetActDataGlobalRebate() *ActDataGlobalRebate {
	if x, ok := x.GetActivityData().(*Activity_ActDataGlobalRebate); ok {
		return x.ActDataGlobalRebate
	}
	return nil
}

func (x *Activity) GetActDataTriggerGift() *ActDataTriggerGift {
	if x, ok := x.GetActivityData().(*Activity_ActDataTriggerGift); ok {
		return x.ActDataTriggerGift
	}
	return nil
}

func (x *Activity) GetActDataFoundationInvest() *ActDataFoundationInvest {
	if x, ok := x.GetActivityData().(*Activity_ActDataFoundationInvest); ok {
		return x.ActDataFoundationInvest
	}
	return nil
}

func (x *Activity) GetActDataExchangeCodeGift() *ActDataExchangeCodeGift {
	if x, ok := x.GetActivityData().(*Activity_ActDataExchangeCodeGift); ok {
		return x.ActDataExchangeCodeGift
	}
	return nil
}

type isActivity_ActivityData interface {
	isActivity_ActivityData()
}

type Activity_ActDataPersonalCharge struct {
	// @inject_tag: bson:"actDataPersonalCharge"
	ActDataPersonalCharge *ActDataPersonalCharge `protobuf:"bytes,11,opt,name=actDataPersonalCharge,proto3,oneof"`
}

type Activity_ActDataGlobalCharge struct {
	// @inject_tag: bson:"actDataGlobalCharge"
	ActDataGlobalCharge *ActDataGlobalCharge `protobuf:"bytes,12,opt,name=actDataGlobalCharge,proto3,oneof"`
}

type Activity_ActDataLevelUpgrade struct {
	// @inject_tag: bson:"actDataLevelUpgrade"
	ActDataLevelUpgrade *ActDataLevelUpgrade `protobuf:"bytes,13,opt,name=actDataLevelUpgrade,proto3,oneof"`
}

type Activity_ActDataTaskPlan struct {
	// @inject_tag: bson:"actDataTaskPlan"
	ActDataTaskPlan *ActDataTaskPlan `protobuf:"bytes,14,opt,name=actDataTaskPlan,proto3,oneof"`
}

type Activity_ActDataSevenDaySign struct {
	// @inject_tag: bson:"actDataSevenDaySign"
	ActDataSevenDaySign *ActDataSevenDaySign `protobuf:"bytes,15,opt,name=actDataSevenDaySign,proto3,oneof"`
}

type Activity_ActDataSuperRechargeGift struct {
	// @inject_tag: bson:"actDataSuperRechargeGift"
	ActDataSuperRechargeGift *ActDataSuperRechargeGift `protobuf:"bytes,16,opt,name=actDataSuperRechargeGift,proto3,oneof"`
}

type Activity_ActDataTimeLimitedTask struct {
	// @inject_tag: bson:"actDataTimeLimitedTask"
	ActDataTimeLimitedTask *ActDataTimeLimitedTask `protobuf:"bytes,17,opt,name=actDataTimeLimitedTask,proto3,oneof"`
}

type Activity_ActDataDailyTask struct {
	// @inject_tag: bson:"actDataDailyTask"
	ActDataDailyTask *ActDataDailyTask `protobuf:"bytes,18,opt,name=actDataDailyTask,proto3,oneof"`
}

type Activity_ActDataGlobalRebate struct {
	// @inject_tag: bson:"actDataGlobalRebate"
	ActDataGlobalRebate *ActDataGlobalRebate `protobuf:"bytes,19,opt,name=actDataGlobalRebate,proto3,oneof"`
}

type Activity_ActDataTriggerGift struct {
	// @inject_tag: bson:"actDataTriggerGift"
	ActDataTriggerGift *ActDataTriggerGift `protobuf:"bytes,20,opt,name=actDataTriggerGift,proto3,oneof"`
}

type Activity_ActDataFoundationInvest struct {
	// @inject_tag: bson:"actDataFoundationInvest"
	ActDataFoundationInvest *ActDataFoundationInvest `protobuf:"bytes,21,opt,name=actDataFoundationInvest,proto3,oneof"`
}

type Activity_ActDataExchangeCodeGift struct {
	// @inject_tag: bson:"actDataExchangeCodeGift"
	ActDataExchangeCodeGift *ActDataExchangeCodeGift `protobuf:"bytes,22,opt,name=actDataExchangeCodeGift,proto3,oneof"`
}

func (*Activity_ActDataPersonalCharge) isActivity_ActivityData() {}

func (*Activity_ActDataGlobalCharge) isActivity_ActivityData() {}

func (*Activity_ActDataLevelUpgrade) isActivity_ActivityData() {}

func (*Activity_ActDataTaskPlan) isActivity_ActivityData() {}

func (*Activity_ActDataSevenDaySign) isActivity_ActivityData() {}

func (*Activity_ActDataSuperRechargeGift) isActivity_ActivityData() {}

func (*Activity_ActDataTimeLimitedTask) isActivity_ActivityData() {}

func (*Activity_ActDataDailyTask) isActivity_ActivityData() {}

func (*Activity_ActDataGlobalRebate) isActivity_ActivityData() {}

func (*Activity_ActDataTriggerGift) isActivity_ActivityData() {}

func (*Activity_ActDataFoundationInvest) isActivity_ActivityData() {}

func (*Activity_ActDataExchangeCodeGift) isActivity_ActivityData() {}

var File_activity_proto protoreflect.FileDescriptor

var file_activity_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0x2f, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x47, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x06, 0x68, 0x61, 0x73, 0x47, 0x6f, 0x74, 0x22, 0x2d, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x47, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x08, 0x52,
	0x06, 0x68, 0x61, 0x73, 0x47, 0x6f, 0x74, 0x22, 0x71, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x47, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x06, 0x68, 0x61, 0x73, 0x47, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x48, 0x61, 0x73, 0x47, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0b, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x48, 0x61, 0x73, 0x47, 0x6f, 0x74, 0x22, 0x6a, 0x0a, 0x18, 0x41, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x51, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x66, 0x67, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x66, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x61, 0x73, 0x47, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61,
	0x73, 0x47, 0x6f, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x47, 0x6f, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x47,
	0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6a, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x66, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x63, 0x66, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x47,
	0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x47, 0x6f, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x48, 0x61, 0x73, 0x47, 0x6f, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x72, 0x61, 0x48, 0x61, 0x73, 0x47,
	0x6f, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x78, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x65, 0x78, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65,
	0x78, 0x74, 0x72, 0x61, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09,
	0x61, 0x77, 0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x09, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b,
	0x50, 0x6c, 0x61, 0x6e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x22,
	0x34, 0x0a, 0x18, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x70, 0x65, 0x72, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x75,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x66, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x66, 0x67,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x47, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x73, 0x47, 0x6f, 0x74, 0x22, 0xb2, 0x01, 0x0a, 0x16, 0x41,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x40, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x77, 0x61,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x79, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x61, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x79, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22,
	0xbe, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x4a, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61,
	0x73, 0x6b, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe3, 0x02, 0x0a, 0x13, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a, 0x11, 0x67, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x41, 0x77,
	0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x5f, 0x0a, 0x11, 0x70, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41,
	0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x44, 0x0a, 0x16, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x41, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x44, 0x0a, 0x16, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x77, 0x0a, 0x11, 0x44, 0x62, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x66, 0x67, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x66, 0x67, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x62, 0x75, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x75, 0x79, 0x22,
	0xa4, 0x01, 0x0a, 0x12, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x69, 0x67, 0x67,
	0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x1a, 0x52, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x62, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x12, 0x51, 0x0a, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x77, 0x61, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62, 0x75, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x1a,
	0x3e, 0x0a, 0x10, 0x41, 0x77, 0x61, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x9a, 0x01, 0x0a, 0x14, 0x44, 0x62, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x45, 0x0a, 0x08, 0x63, 0x6f, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x62, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x01, 0x0a,
	0x17, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x47, 0x69, 0x66, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x47, 0x69, 0x66, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x56, 0x0a, 0x0b,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x62, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xe2, 0x09, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x61, 0x63, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x73, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x54, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x54, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x15, 0x61,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x48, 0x00, 0x52, 0x15, 0x61, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x4e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x48, 0x00, 0x52, 0x13, 0x61, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x4e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x48, 0x00, 0x52, 0x13, 0x61, 0x63,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x12, 0x42, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b,
	0x50, 0x6c, 0x61, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6c,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x48, 0x00,
	0x52, 0x13, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x5d, 0x0a, 0x18, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66, 0x74, 0x48, 0x00, 0x52, 0x18, 0x61, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x47, 0x69, 0x66, 0x74, 0x12, 0x57, 0x0a, 0x16, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x16, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x45, 0x0a,
	0x10, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b,
	0x48, 0x00, 0x52, 0x10, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x54, 0x61, 0x73, 0x6b, 0x12, 0x4e, 0x0a, 0x13, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x13, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65,
	0x62, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x48, 0x00, 0x52, 0x12, 0x61,
	0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x47, 0x69, 0x66,
	0x74, 0x12, 0x5a, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x17, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x75,
	0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a,
	0x17, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x47, 0x69, 0x66, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x69, 0x66, 0x74, 0x48, 0x00,
	0x52, 0x17, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x69, 0x66, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x44, 0x61, 0x74, 0x61, 0x2a, 0xbf, 0x02, 0x0a, 0x0d, 0x45, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x41, 0x54, 0x5f, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x41, 0x54, 0x5f, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x41, 0x54, 0x5f, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x41,
	0x54, 0x5f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x45, 0x41, 0x54, 0x5f, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x6c, 0x61, 0x6e,
	0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x41, 0x54, 0x5f, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x44,
	0x61, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x41, 0x54, 0x5f,
	0x53, 0x75, 0x70, 0x65, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x69, 0x66,
	0x74, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x41, 0x54, 0x5f, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x41, 0x54, 0x5f, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x10, 0x08, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x41, 0x54, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x41, 0x54, 0x5f, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x47, 0x69, 0x66, 0x74, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x41,
	0x54, 0x5f, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x41, 0x54, 0x5f, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x47, 0x69, 0x66, 0x74, 0x10, 0x0c, 0x12, 0x0b,
	0x0a, 0x07, 0x45, 0x41, 0x54, 0x5f, 0x4d, 0x61, 0x78, 0x10, 0x0d, 0x42, 0x0d, 0x5a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x62, 0x67, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_activity_proto_rawDescOnce sync.Once
	file_activity_proto_rawDescData = file_activity_proto_rawDesc
)

func file_activity_proto_rawDescGZIP() []byte {
	file_activity_proto_rawDescOnce.Do(func() {
		file_activity_proto_rawDescData = protoimpl.X.CompressGZIP(file_activity_proto_rawDescData)
	})
	return file_activity_proto_rawDescData
}

var file_activity_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_activity_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_activity_proto_goTypes = []interface{}{
	(EActivityType)(0),               // 0: model.EActivityType
	(*ActDataPersonalCharge)(nil),    // 1: model.ActDataPersonalCharge
	(*ActDataGlobalCharge)(nil),      // 2: model.ActDataGlobalCharge
	(*ActDataLevelUpgrade)(nil),      // 3: model.ActDataLevelUpgrade
	(*ActDataTaskPlanQuestItem)(nil), // 4: model.ActDataTaskPlanQuestItem
	(*ActDataTaskPlanAwardItem)(nil), // 5: model.ActDataTaskPlanAwardItem
	(*ActDataTaskPlan)(nil),          // 6: model.ActDataTaskPlan
	(*ActDataSevenDaySign)(nil),      // 7: model.ActDataSevenDaySign
	(*ActDataSuperRechargeGift)(nil), // 8: model.ActDataSuperRechargeGift
	(*TimeLimitedTaskItem)(nil),      // 9: model.TimeLimitedTaskItem
	(*ActDataTimeLimitedTask)(nil),   // 10: model.ActDataTimeLimitedTask
	(*ActDataDailyTask)(nil),         // 11: model.ActDataDailyTask
	(*ActDataGlobalRebate)(nil),      // 12: model.ActDataGlobalRebate
	(*DbTriggerGiftItem)(nil),        // 13: model.DbTriggerGiftItem
	(*ActDataTriggerGift)(nil),       // 14: model.ActDataTriggerGift
	(*ActDataFoundationInvest)(nil),  // 15: model.ActDataFoundationInvest
	(*DbExchangeCodeRecord)(nil),     // 16: model.DbExchangeCodeRecord
	(*ActDataExchangeCodeGift)(nil),  // 17: model.ActDataExchangeCodeGift
	(*Activity)(nil),                 // 18: model.Activity
	nil,                              // 19: model.ActDataDailyTask.AwardStatusEntry
	nil,                              // 20: model.ActDataGlobalRebate.GlobalAwardStatusEntry
	nil,                              // 21: model.ActDataGlobalRebate.PersonAwardStatusEntry
	nil,                              // 22: model.ActDataTriggerGift.ItemsEntry
	nil,                              // 23: model.ActDataFoundationInvest.AwardStatusEntry
	nil,                              // 24: model.DbExchangeCodeRecord.CodeDataEntry
	nil,                              // 25: model.ActDataExchangeCodeGift.RecordEntry
}
var file_activity_proto_depIdxs = []int32{
	5,  // 0: model.ActDataTaskPlan.awardData:type_name -> model.ActDataTaskPlanAwardItem
	4,  // 1: model.ActDataTaskPlan.questData:type_name -> model.ActDataTaskPlanQuestItem
	9,  // 2: model.ActDataTimeLimitedTask.taskAwardData:type_name -> model.TimeLimitedTaskItem
	19, // 3: model.ActDataDailyTask.awardStatus:type_name -> model.ActDataDailyTask.AwardStatusEntry
	20, // 4: model.ActDataGlobalRebate.globalAwardStatus:type_name -> model.ActDataGlobalRebate.GlobalAwardStatusEntry
	21, // 5: model.ActDataGlobalRebate.personAwardStatus:type_name -> model.ActDataGlobalRebate.PersonAwardStatusEntry
	22, // 6: model.ActDataTriggerGift.items:type_name -> model.ActDataTriggerGift.ItemsEntry
	23, // 7: model.ActDataFoundationInvest.awardStatus:type_name -> model.ActDataFoundationInvest.AwardStatusEntry
	24, // 8: model.DbExchangeCodeRecord.codeData:type_name -> model.DbExchangeCodeRecord.CodeDataEntry
	25, // 9: model.ActDataExchangeCodeGift.record:type_name -> model.ActDataExchangeCodeGift.RecordEntry
	0,  // 10: model.Activity.actType:type_name -> model.EActivityType
	1,  // 11: model.Activity.actDataPersonalCharge:type_name -> model.ActDataPersonalCharge
	2,  // 12: model.Activity.actDataGlobalCharge:type_name -> model.ActDataGlobalCharge
	3,  // 13: model.Activity.actDataLevelUpgrade:type_name -> model.ActDataLevelUpgrade
	6,  // 14: model.Activity.actDataTaskPlan:type_name -> model.ActDataTaskPlan
	7,  // 15: model.Activity.actDataSevenDaySign:type_name -> model.ActDataSevenDaySign
	8,  // 16: model.Activity.actDataSuperRechargeGift:type_name -> model.ActDataSuperRechargeGift
	10, // 17: model.Activity.actDataTimeLimitedTask:type_name -> model.ActDataTimeLimitedTask
	11, // 18: model.Activity.actDataDailyTask:type_name -> model.ActDataDailyTask
	12, // 19: model.Activity.actDataGlobalRebate:type_name -> model.ActDataGlobalRebate
	14, // 20: model.Activity.actDataTriggerGift:type_name -> model.ActDataTriggerGift
	15, // 21: model.Activity.actDataFoundationInvest:type_name -> model.ActDataFoundationInvest
	17, // 22: model.Activity.actDataExchangeCodeGift:type_name -> model.ActDataExchangeCodeGift
	13, // 23: model.ActDataTriggerGift.ItemsEntry.value:type_name -> model.DbTriggerGiftItem
	16, // 24: model.ActDataExchangeCodeGift.RecordEntry.value:type_name -> model.DbExchangeCodeRecord
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_activity_proto_init() }
func file_activity_proto_init() {
	if File_activity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_activity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActDataPersonalCharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActDataGlobalCharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActDataLevelUpgrade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActDataTaskPlanQuestItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActDataTaskPlanAwardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActDataTaskPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActDataSevenDaySign); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActDataSuperRechargeGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeLimitedTaskItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActDataTimeLimitedTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActDataDailyTask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActDataGlobalRebate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbTriggerGiftItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActDataTriggerGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActDataFoundationInvest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DbExchangeCodeRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActDataExchangeCodeGift); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_activity_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Activity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_activity_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*Activity_ActDataPersonalCharge)(nil),
		(*Activity_ActDataGlobalCharge)(nil),
		(*Activity_ActDataLevelUpgrade)(nil),
		(*Activity_ActDataTaskPlan)(nil),
		(*Activity_ActDataSevenDaySign)(nil),
		(*Activity_ActDataSuperRechargeGift)(nil),
		(*Activity_ActDataTimeLimitedTask)(nil),
		(*Activity_ActDataDailyTask)(nil),
		(*Activity_ActDataGlobalRebate)(nil),
		(*Activity_ActDataTriggerGift)(nil),
		(*Activity_ActDataFoundationInvest)(nil),
		(*Activity_ActDataExchangeCodeGift)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_activity_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_activity_proto_goTypes,
		DependencyIndexes: file_activity_proto_depIdxs,
		EnumInfos:         file_activity_proto_enumTypes,
		MessageInfos:      file_activity_proto_msgTypes,
	}.Build()
	File_activity_proto = out.File
	file_activity_proto_rawDesc = nil
	file_activity_proto_goTypes = nil
	file_activity_proto_depIdxs = nil
}

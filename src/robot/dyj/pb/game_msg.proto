syntax = "proto3";
option go_package = "server/pbgo";
package msg;

import "msg.proto";
import "user_base.proto";
import "world.proto";
import "warehouse.proto";
import "plant.proto";
import "itemInfo.proto";
import "order.proto";
import "product.proto";
import "shop.proto";
import "mall.proto";
import "dailySign.proto";
import "task.proto";
import "delivery.proto";
import "petBuilding.proto";
import "pet.proto";
import "npc.proto";
import "petDispatch.proto";
import "activity.proto";
import "activityCfg.proto";
import "bluevip.proto";
import "qqhallgift.proto";
import "email.proto";
import "common_msg.proto";
import "lianliankan.proto";
import "tetris.proto";

// protoc --proto_path=./pb --go_out=./pbgo --go_opt=paths=source_relative ./pb/game_msg.proto

//消息后缀为ST，表示一种状态；为EV表示用户触发的某种事件；为NT表示服务端生成的通知
//消息后缀为Req，表示客户端向服务端发送的请求

enum PCK {
  Default_ID                = 0;
  C2SCommon_ID              = 1001;
  S2CCommon_ID              = 2001;
  C2SLogin_ID               = 1002;
  S2CLogin_ID               = 2002;
  C2SCreateBuilding_ID      = 1003;
  S2CCreateBuilding_ID      = 2003;
  C2SMoveBuilding_ID        = 1004;
  S2CMoveBuilding_ID        = 2004;
  C2SBuildingOpera_ID       = 1005;
  S2CBuildingOpera_ID       = 2005;
  C2SPlantOpera_ID          = 1007;
  S2CPlantOpera_ID          = 2007;
  C2SOrderOpera_ID          = 1008;
  S2COrderOpera_ID          = 2008;
  C2SWarehouse_ID           = 1009;
  S2CWarehouse_ID           = 2009;
  C2SItemInfo_ID            = 1010;
  S2CItemInfo_ID            = 2010;
  C2SProductOpera_ID        = 1011;
  S2CProductOpera_ID        = 2011;
  C2SUserBaseOpera_ID       = 1012;
  S2CUserBaseOpera_ID       = 2012;
  C2SShopOpera_ID           = 1013;
  S2CShopOpera_ID           = 2013;
  C2STask_ID                = 1014;
  S2CTask_ID                = 2014;
  C2SWorldOpera_ID          = 1015;
  S2CWorldOpera_ID          = 2015;
  C2SFormula_ID             = 1017;
  S2CFormula_ID             = 2017;
  C2SDelivery_ID            = 1018;
  S2CDelivery_ID            = 2018;
  C2SPetBuilding_ID         = 1020;
  S2CPetBuilding_ID         = 2020;
  C2SPet_ID                 = 1021;
  S2CPet_ID                 = 2021;
  C2SPetAssign_ID           = 1022;
  S2CPetAssign_ID           = 2022;
  S2CCommonReward_ID        = 2023;
  C2SNPCInfo_ID             = 1024;
  S2CNPCInfo_ID             = 2024;
  C2SBuyGoods_ID            = 1025;
  S2CBuyGoods_ID            = 2025;
  C2SMallOpera_ID           = 1026;
  S2CMallOpera_ID           = 2026;
  C2SPetDispatch_ID         = 1027;
  S2CPetDispatch_ID         = 2027;
  C2SDailySign_ID           = 1028;
  S2CDailySign_ID           = 2028;
  C2SActivityOpera_ID       = 1029;
  S2CActivityOpera_ID       = 2029;
  C2STaskActivity_ID        = 1030;
  S2CTaskActivity_ID        = 2030;
  C2SMonthSupply_ID         = 1031;
  S2CMonthSupply_ID         = 2031;
  C2SFetchActCfg_ID         = 1032;
  S2CFetchActCfg_ID         = 2032;
  C2SRankOpera_ID           = 1033;
  S2CRankOpera_ID           = 2033;
  C2SOpenBoxReq_ID          = 1034;
  S2COpenBoxRsp_ID          = 2034;
  NotifyUserDataChange_ID   = 2035;
  NotifyDeliverGoods_ID     = 2036;
  C2SBlueVipReq_ID          = 1037;
  S2CBlueVipRsp_ID          = 2037;
  C2SQQHallGiftReq_ID       = 1038;
  S2CQQHallGiftRsp_ID       = 2038;
  C2SEmailReq_ID            = 1039;
  S2CEmailRsp_ID            = 2039;
  NotifyNewEmail_ID         = 2040;
  C2SUserInfoReq_ID         = 1041;
  S2CUserInfoRsp_ID         = 2041;
  S2CEventStatsChange_ID    = 2042;
}

enum LLKMsgId {
  LLKDefault_ID              = 0;
  C2SLianLianKan_ID         = 3001;
  S2CLianLianKan_ID         = 4001;
}

enum TetrisMsgId {
  TetrisDefault_ID          = 0;
  C2STetrisStart_ID         = 5001; //开始游戏
  S2CTetrisStart_ID         = 6001; //开始游戏
  C2STetrisOpe_ID           = 5002; //游戏操作
  S2CTetrisOpe_ID           = 6002; //游戏操作
  C2STetrisAbort_ID         = 5003; //中途退出
  S2CTetrisAbort_ID         = 6003; //中途退出
  C2STetrisOver_ID          = 5004; //游戏结束
  S2CTetrisOver_ID          = 6004; //游戏结束
}

//----------------------------客户端请求--------------------------
//用户认证，id:1，用户认证后自动进入准备状态

message C2SCommon {
  int32 version = 1; //客户端版本，现在传0就
}

message S2CCommon {
  msg.STATUS errCode = 1;
}

message C2SLogin {
  int32 version = 1; //客户端版本，现在传0就
  int64 timestamp = 2;
  string id = 3;      // openId
  string token = 4;
  bool isReconnect = 5;
  string ip = 6;
  string openKey = 7;
  string pf = 8;
  string userId = 9;  //! 用于测试版本
}

message S2CLogin {
  msg.STATUS errCode = 1;
  model.UserBase userBase = 2;
  model.World world = 3;
  repeated model.PlantInfo plantList = 5;
  uint32 SvrTime = 6;
  uint32 lvl = 7;
  bool firstLogin = 8;
}

enum CreateBuildingOpera {
  CreateBuildingOperaInvalid = 0;
  BuildStart = 1; //! 开始建造
  BuildEnd = 2; //! 建造结束
  BuildAccelerate = 3;   //! 加速
}

message C2SCreateBuilding {
  uint32 uiId = 1;
  CreateBuildingOpera createBuildingOpera = 2;
  model.Model buildModel = 3;
  bool buyFlag = 4;
  string buildUid = 5;
  uint32 propId = 6;
}

message S2CCreateBuilding {
  msg.STATUS errCode = 1;
  CreateBuildingOpera createBuildingOpera = 2;
  string buildUid = 3;
  uint32 buildStartTime = 4;  //! 开始建造时间
}

message C2SMoveBuilding {
  uint32 uiId = 1;
  string id = 2;
  model.Position pos = 3;
  uint32 direction = 4;
}

message S2CMoveBuilding {
  msg.STATUS errCode = 1;
}

enum BuildingOpera {
  BO_Invalid = 0;
  BO_RepairStart = 1;  //! 开始修复
  BO_RepairEnd = 2;    //! 修复结束
  BO_RemoveStart = 3;  //! 开始移除
  BO_RemoveEnd = 4;    //! 移除结束
  BO_Accelerate = 5;   //! 加速
  BO_UpgradeLvl = 10;
}

//! 建筑相关操作
message C2SBuildingOpera {
  uint32 uiId = 1;
  BuildingOpera buildingOpera = 2;
  string buildUid = 3;
  uint32 propId = 4;
}

message S2CBuildingOpera {
  msg.STATUS errCode = 1;
  BuildingOpera buildingOpera = 2;
  model.Model buildModel = 3;
  string buildUid = 4;
  uint32 buildStartTime = 5;  //! 开始建造时间
}

enum PropFrom {
  InvalidPropFrom = 0;
  WareHouse = 1;
  Bag = 2;
}

enum PropOpera {
  InvalidOpera = 0;
  Sell = 1;
}


message C2SPlantOpera {
  uint32 uiId = 1;
  string plantUid = 2;          //! 植物的唯一id, 创建的时候传值为空
  string buildUid = 3;          //! 植物依赖的建筑的唯一id, 创建的时候需要传值
  uint32 globalItemId = 4;      //！植物的全局id
  uint32 propGlobalItemId = 5;  //！道具 id, 注意 种植、浇水等也需要配置id
  uint32 branchId = 6;          //！道具 id, 注意 种植、浇水等也需要配置id
  uint32 accelerateId = 7;      //! 加速道具id
}

message S2CPlantOpera {
  msg.STATUS errCode = 1;
  model.PlantInfo plantInfo = 2;
  uint32 propGlobalItemId = 3; //！道具 id, 注意 种植、浇水等也需要配置id
}

enum OrderOperaCmd {
  OrderOperaCmdInvalid = 0;
  GetOrder = 1;
  SubmitOrder = 2;
  RefreshOrder = 3;
}

message C2SOrderOpera {
  uint32 uiId = 1;
  string buildUid = 2;
  OrderOperaCmd operaCmd = 3;
  uint32 orderIndex = 4;
}

message S2COrderOpera {
  msg.STATUS errCode = 1;
  OrderOperaCmd operaCmd = 2;
  model.OrderInfo orderInfo = 3;
}

enum WarehouseCmd {
  WarehouseCmdInvalid = 0;
  GetWareHouse = 1;
  Expand = 2;
}

enum WarehouseExpandCmd {
  EWEC_Invalid = 0;
  EWEC_Props = 1; // 道具扩展
  EWEC_Coupons = 2; // 仓库券扩展
}

message WarehouseGetReq {
}

message WarehouseExpandReq {
    WarehouseExpandCmd expandCmd = 1;
}

message WarehouseSellReq {
  uint32 itemId = 1;
  uint32 num = 2;
}

message C2SWarehouse{
  uint32 uiId = 1;
  oneof Opera {
      WarehouseGetReq getReq = 2;
      WarehouseExpandReq expandReq = 3;
      WarehouseSellReq sellReq = 4;
  }
}

message WarehouseGetRsp {
  model.WareHouse WareHouse = 1;
  uint32 capacity = 2;
}

message WarehouseExpandRsp {
  model.WareHouse WareHouse = 1;
  uint32 capacity = 2;
}

message WarehouseSellRsp {
//  model.WareHouse WareHouse = 1;
}

message S2CWarehouse {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  oneof Opera {
    WarehouseGetRsp getRsp = 3;
    WarehouseExpandRsp expandRsp = 4;
    WarehouseSellRsp sellRsp = 5;
  }
}

enum ItemChange {
  ItemAll = 0;
  UpdateTo = 1;
}

message C2SItemInfo{
  ItemChange itemChange = 1;
}
message ItemChangeInfo {
  ItemChange ItemChange = 1;
  repeated model.ItemInfo itemList = 2;
}

message S2CItemInfo {
  msg.STATUS errCode = 1;
  repeated ItemChangeInfo itemChangeInfo = 2;
  uint32 uiId = 3;
}

enum ProductOperaCmd {
  ProductOperaCmdInvalid = 0;
  GetProduct = 1;
  ProductStart = 2;
  ProductEnd = 3;
  UnlockField = 4;
  Accelerate = 5;
}

message C2SProductOpera {
  uint32 uiId = 1;
  ProductOperaCmd operaCmd = 2;
  string buildUid = 3;
  oneof Opera{
    uint32 globalItemId = 4;   //! 生产时需要的生产id
    uint32 productIndex = 5;   //! 领取生产物品的时候需要带上
    uint32 addFieldId = 6;    //解锁格子(对应配置里的id)
    uint32 propId = 7;      //对应配置中的id
  }
}

message S2CProductOpera {
  msg.STATUS errCode = 1;
  ProductOperaCmd operaCmd = 2;
  model.ProductInfo productInfo = 3;  //! 全量的，如果领取中间的，中间这个被删除后，后面的会往前
}

message UserBaseChangeReq {
  string nickName = 1;
  uint32  sex = 2;
}

message C2SUserBaseOpera {
  uint32 uiId = 1;
  oneof Opera {
    UserBaseChangeReq changeReq = 2;
    int32  headFrame = 3;
  }
}

message UserBaseChangeRsp {
  string nickName = 1;
  uint32  sex = 2;
  uint32 lastChangeTime = 3;
}

message S2CUserBaseOpera {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  oneof Opera {
    UserBaseChangeRsp changeRsp = 3;
    int32  headFrame = 4;
  }
}

enum ShopOperaCmd {
  SO_Get = 0;
  SO_Buy = 1;
}

message C2SShopOpera {
  uint32 uiId = 1;
  model.EShopType shopType = 2;
  ShopOperaCmd shopOperaCmd = 3;
  uint32 globalItemId = 4;
  uint32 cnt = 5;
}

message S2CShopOpera {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  repeated model.ShopItem shopItemList = 3;
}

enum TaskOperaCmd {
  TOC_Get = 0;
  TOC_Accept = 1;
  TOC_Submit = 2;
  TOC_Notify = 3;
  TOC_FetchAll = 4;
}

message C2STask {
  uint32 uiId = 1;
  TaskOperaCmd taskOperaCmd = 2;
  repeated uint32 taskList = 3;
}

message S2CTask {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  TaskOperaCmd taskOperaCmd = 3;
  repeated model.Task taskItemList = 4;
}

message C2SWorldOpera {
  uint32 uiId = 1;
  repeated model.Building removeList = 2; //! 批量移除装饰建筑
  repeated model.Building addList = 3; //! 批量增加装饰建筑
  repeated model.Building modList = 4;  //! 批量修改建筑的位置或坐标
}

message S2CWorldOpera {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  repeated model.Building removeList = 3; //! 批量移除装饰建筑
  repeated model.Building addList = 4; //! 批量增加装饰建筑
  repeated model.Building modList = 5;  //! 批量修改建筑的位置或坐标
}

enum EReward {
  ER_Invalid = 0;
  ER_Lvl = 1;
  ER_ComfortLvl = 2;
}

enum EMaterialType {
  EMT_Invalid = 0;
  EMT_Main = 1;
  EMT_Sub = 2;
}

message Material {
  EMaterialType type = 1;
  uint32 globalItemID = 2;
  uint32 costLv = 3;
}

message C2SFormula {
  uint32 uiId = 1;
  repeated  Material material = 2;
}

message S2CFormula {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
}

enum EDeliveryOpera {
  EDO_Get = 0;
  EDO_Load = 1; //! 装货 最后一个装完自动发车
  EDO_Flash = 2; //! 光速返程
  EDO_Fin = 3; //! 配送完成的确认 最后一个奖励领取完，自动刷新下一个货物清单
  EDO_Restock = 4; //! 道具补货
}

message C2SDelivery {
  uint32 uiId = 1;
  string buildUid = 2;
  EDeliveryOpera opera = 3;
  uint32 cargoIndex = 4; //! 货车索引
  uint32 loadIndex = 5; //! 装货索引999代表是一键装填 现在需求是要不装完，要不只有装一个
  uint32 finRewardIndex = 6; //! 领取返程后的奖励索引  当索引为999代表是一键领取
}

message S2CDelivery {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  EDeliveryOpera opera = 3;
  repeated model.Cargo cargoList = 4;
}

enum ELianLianKanOpera {
  ELLKO_GET = 0;  //! 无效操作
  ELLKO_MATCHING = 1;  //! 匹配操作 对应ELianLianKanMatch
  ELLKO_MATCHED = 2;  //! 匹配成功  对应model.LLKRoom
  ELLKO_GAMING = 3;  //! 游戏中的连线及道具操作 对应 model.LLKRoom
  ELLKO_GAME_END = 4;  //! 游戏结算 两种情况：1. 一方连完 2到时间结束
}

enum ELLKGetOperaType {
  ELLKG_INVALID = 0;  //! 无效操作
  ELLKG_MATCHED = 1;  //! 掉线回来请求匹配数据  返回的是matched和roomId
  ELLKG_GAMING = 2;   //! 掉线回来请求游戏中数据  返回的是gaming，如果游戏结束有返回错误码
}

message LianLianKanGetReq {
  ELLKGetOperaType operaType = 1;
}

message LianLianKanGetRsp {
    LLKMatched matched = 1;
    string roomId = 2;
    model.LLKRoom  gaming = 3;
    model.UserBase userInfo = 4;  //! 注意：下发对方的时候需要脱敏  matched操作的时候会下发该数据
}

enum ELianLianKanMatch {
  ELLKM_INVALID = 0;  //! 无效操作
  ELLKM_APPLY = 1;  //! 申请匹配
  ELLKM_TIME_OUT = 2;  //! 匹配超时
  ELLKM_CANCEL = 3;  //! 取消匹配
}

enum ELianLianKanMatchedOpera {
  ELLKMO_INVALID = 0;  //! 无效操作
  ELLKMO_CONFIRM = 1;  //! 确认匹配
  ELLKMO_REFUSE = 2;  //! 拒绝匹配
  ELLKMO_TIME_OUT_START_GAME = 3;  //! 一方不准备的超时后自动开始游戏
  ELLKMO_TIME_OUT_END_MATCHED = 4;  //! 双方不准备的超时结束
  ELLKMO_LOGOUT = 5;  //! 玩家掉线
}

message LLKMatchedOperaInfo  {
  string matchId = 1;
  ELianLianKanMatchedOpera matchedOpera = 2; //匹配成功后,确认匹配结果
}

message LLKMatchedInfo{
  string uid = 1;
  ELianLianKanMatchedOpera matchedOpera = 2;
}

message LLKMatched {
  string matchId = 1;
  uint32 rank = 2;
  repeated LLKMatchedInfo matchedInfo = 3;
  repeated model.UserBase userInfo = 4;  //! 注意：下发对方的时候需要脱敏
}

message LLKGameOperaInfo  {
  string roomId = 1;
  model.LLKOpera opera = 2;
}

message C2SLianLianKan {
  uint32 uiId = 1;
  ELianLianKanOpera operaType = 2;
  oneof OperaValue {
    LianLianKanGetReq getReq = 3;
    ELianLianKanMatch matching = 4; // 匹配操作
    LLKMatchedOperaInfo matchedOperaInfo = 5; //匹配成功后,确认匹配结果
    LLKGameOperaInfo gameOperaInfo = 6;
  }
}

message LLKReward {
  string uin = 1;
  repeated model.ItemInfo itemList = 2;
}

message LLKGameEndEx {
  model.LLKGameEnd  modelGameEnd = 1;
  repeated LLKReward llkReward = 2;
}

//! 分三个阶段
//! 匹配中 可以操作的请求匹配 取消匹配 匹配超时
//! 匹配成功 可以操作的是确认匹配和拒绝匹配
//! 游戏中 道具使用和连线操作
message S2CLianLianKan {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  ELianLianKanOpera operaType = 3;
  oneof OperaValue {
    LianLianKanGetRsp getRsp = 4;      // 如果断线进来，是返回玩家当前状态, 玩家点确认就直接用这个数据，点取消的话就按以前的发EXXL_FLEET
    ELianLianKanMatch matching = 5;
    LLKMatched matched = 6;
    model.LLKRoom  gaming = 7;
    LLKGameEndEx  gameEnd = 8;
  }
}

enum EPetBuildingOpera {
    EPBO_INVALID    = 0;  //! 无效操作
    EPBO_GET        = 1;  //! 拉取
    EPBO_ADD        = 2;  //！新增招募
    EPBO_ACCELERATE = 3;  // 加速招募
    EPBO_STOP       = 4;  // 停止招募
    EPBO_AWARD      = 5;  //! 领取宠物
}

message C2SPetBuilding {
  uint32 uiId                 = 1;
  EPetBuildingOpera operaType = 2;
  string buildUid             = 3;
  int32 index                 = 4; //! 操作的index
  uint32 recruitType          = 5; //! 增加一个招募时的类型
  uint32 accelerateCount	  = 6; //! 加速次数
}

message S2CPetBuilding {
  msg.STATUS errCode            = 1;
  uint32 uiId                   = 2;
  EPetBuildingOpera operaType   = 3;
  model.PetBuilding petBuilding = 4;  //! 全量的
  model.PetInfo petInfo         = 5;
}

enum EPetOpera {
  EPO_INVALID = 0;  //! 无效操作
  EPO_FETCH = 1;  //! 拉取
  EPO_UPGRADE = 2;  //! 升级、突破
  EPO_ASSIGN = 3;  //! 指派工作
  EPO_UN_ASSIGN = 4;  //! 取消指派工作
  EPO_RESET = 5;  //! 宠物涅槃
  EPO_SKILL_UPGRADE = 6;  //! 技能升级
  EPO_SKILL_CHANGE = 7; //! 技能重置
  EPO_RELEASE = 8; //! 放生
}

message PetUpgrade {
  repeated model.ItemInfo propList = 1;
}

message PetAssign {
  string workBuildingUid = 1;
}

message PetUnAssign {
  string workBuildingUid = 1;
}
//变异
message PetVariation {
  uint32 globalItemId = 1;
  uint32 skillGlobalItemId = 2;
}
//技能升级
message PetSkillUpgrade {
  uint32 skillIndex = 1;
}
//技能重置
message PetSkillChange {
  uint32 skillIndex = 1;
  uint32 skillGlobalItemId = 2;
}
//确定技能重置
message PetSkillChangeConfirm {
  uint32 skillIndex = 1;
  uint32 skillGlobalItemId = 2;
}

//重命名
message PetRename {
  string name = 1;
}

//重命名
message PetRelease {
  string petUid = 1;
}

message C2SPet {
  uint32 uiId = 1;
  string petUid = 2;
  EPetOpera operaType = 3;
  oneof OperaValue {
    PetUpgrade petUpgrade = 4;
    PetAssign petAssign = 5;
    PetUnAssign petUnAssign = 6;
    PetSkillUpgrade petSkillUpgrade = 7;//技能升级
    PetSkillChange petSkillChange = 8;//技能重置
    PetSkillChangeConfirm petSkillChangeConfirm = 9;//确认技能重置
    PetRename petRename = 10;
    PetRelease petRelease = 11;
  }
}

message S2CPet {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  EPetOpera operaType = 3;
  model.Pet pet = 11;  //! 全量的
  oneof OperaValue {
    PetUpgrade petUpgrade = 4;
    PetAssign PetAssign = 5;
    PetVariation petVariation = 6;//变异
    PetSkillUpgrade petSkillUpgrade = 7;//技能升级
    PetSkillChange petSkillChange = 8;//技能重置
    PetSkillChangeConfirm petSkillChangeConfirm = 9;//确认技能重置
    PetRename petRename = 10;
    PetRelease petRelease = 12;
  }
}

message C2SPetAssign {
  uint32 uiId = 1;
  string petUid = 2;
  string buildUid = 3;
}

message S2CPetAssign {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  string buildUid = 3;
  model.PetAssignInfo petAssignInfo = 4;
}

message S2CCommonReward {
  repeated model.ItemInfo itemList = 1;
  uint32 uiId = 2;
}

enum ENPCOpera {
  ENO_INVALID = 0;  //! 无效操作
  ENO_INFO = 1;  //! 拉取
  ENO_INVITE = 2;  //! 邀请来庄园
  ENO_GIVE = 3;   //赠送喜好礼物
  ENO_TOKEN = 4;  //领取手信
}

//! 拉取npc信息
message GetNPCInfo {
}

//! 邀请npc
message InviteNPC {
  uint32 npcId = 1;
}

//! 投喂NPC喜好礼物
message FeedNPC {
  uint32 npcId = 1;
  model.ItemInfo itemInfo = 2;
}
//谈天说地
message TalkNPC {
  uint32 npcId = 1;
}

//! 领取手信
message TakeReward {
  uint32 npcId = 1;
  int32 itemIndex = 2; // 领取物品的索引 默认从0开始
}

//! 进行初见任务
message FirstTalk {
  uint32 npcId = 1;
}

message C2SNPCInfo {
  uint32 uiId = 1;
  oneof OperaValue {
    GetNPCInfo getNPCInfo = 2;
    InviteNPC  inviteNPC = 3;
    FeedNPC feedNPC = 4;
    TalkNPC talkNPC = 5;
    TakeReward takeReward = 6;
    FirstTalk firstTalk = 7;
  }
}

message S2CNPCInfo {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  model.Npc npc = 3;//已解锁npc列表
  uint32 talkId = 4;//谈天说地返回的id
}

// 直购
message C2SBuyGoods {
  uint32 uiId = 1;
  uint32 directBuyId = 2; // 直购id
  uint32 count = 3;
  string openid = 4;
  string openKey = 5;
  string pf = 6;
  string pfKey = 7;
}

message S2CBuyGoods {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  string token = 3;
  string url_params = 4;
}

message NotifyDeliverGoods{// 直购通知发货成功
  uint32 uiId = 1;
  uint32 directBuyId = 2; // 直购id
}

// 道具/装饰商城
message BuyMerchandise {
  uint32 merchandiseId = 1;
  uint32 cnt = 2;
}

enum EMallOperType {
  MOT_Get = 0;
  MOT_Buy = 1;
}

message C2SMallOpera {
  uint32 uiId = 1;
  EMallOperType operType = 2;
  repeated BuyMerchandise merchandiseList = 3;
  uint32 groupId = 4;
}

message S2CMallOpera {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  repeated model.MallItem mallItemList = 3; // 已购买信息
}

// 签到
enum EDailySignOperType {
  DSOT_Get = 0;
  DSOT_Sign = 1;
  DSOT_ReSign = 2; // 补签
}

message C2SDailySign {
  uint32 uiId = 1;
  EDailySignOperType operType = 2;
  uint32 targetDay = 3;
}

message S2CDailySign {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  uint32 month = 3;
  uint32 day = 4;
  repeated model.EDailySignState dailySignList = 5; // 签到信息
}

// 拉取宠物派遣信息
message PetDispatchGet {
}

message PetDispatchDo {
  uint32 pointId = 1;
  repeated string petUidList = 2;
}

message PetDispatchAward {
  uint32 pointId = 1;
}

message C2SPetDispatch {
  uint32 uiId = 1;
  oneof OperaValue {
    PetDispatchGet petDispatchGet = 2;
    PetDispatchDo petDispatchDo = 3;
    PetDispatchAward petDispatchAward = 4;
  }
}

message PetDispatchAwardInfo {
  repeated model.ItemInfo itemList = 1;
  repeated uint32 AddExpList = 2;
  repeated model.PetInfo petInfoList = 3;
}

message S2CPetDispatch{
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  repeated model.PetDispatchInfo petDispatchInfos  = 3;
  oneof OperaValue {
    PetDispatchAwardInfo petDispatchAwardInfo = 4;
  }
}

/* -------------------- 活动开始 --------------------*/

// 个人累充
message ActReqPersonalCharge{
  uint32 operType = 1; // 1 拉取, 2 领奖, 3 一键领取
  uint32 tagretId = 2; // 领奖配置id
}

message ActRspPersonalCharge{
  uint32 operType = 1; // 1拉取, 2领奖
  uint32 totalChargeNum = 2; // 总充值
  uint32 totalChargeDay = 3; // 总充值
  repeated bool awardStatus = 4; // 领奖状态(0未领取 1已领取)
}

// 全服累充
message ActReqGlobalCharge{
  uint32 operType = 1; // 1 拉取, 2 领奖, 3 一键领取
  uint32 tagretId = 2; // 领奖配置id
}

message ActRspGlobalCharge{
  uint32 operType = 1; // 1拉取, 2领奖
  uint32 totalChargeNum = 2; // 总充值金额
  uint32 totalPlayerNum = 3; // 总充值超过X的认输
  repeated bool awardStatus = 4; // 领奖状态(0未领取 1已领取)
}

// 冲级活动
message ActReqLevelUpgrade{
  uint32 operType = 1; // 1 拉取, 2 领奖, 3 一键领取
  uint32 tagretId = 2; // 领奖配置id
}

message ActRspLevelUpgrade{
  uint32 operType = 1; // 1拉取, 2领奖, 3 一键领取
  bool extraUnlock = 2; // 额外奖励是否解锁
  repeated bool awardStatus = 3; // 领奖状态(0未领取 1已领取)
  repeated bool extraStatus = 4; // 额外奖励领奖状态(0未领取 1已领取)
}

// 战令
message ActTaskPlanQuest {
  uint32 cfgId = 1;
  uint32 progress = 3; // 进度
  bool hasGot = 2;
}

message ActReqTaskPlan{
  uint32 operType = 1; // 1 拉取, 2 完成任务, 3领取奖励 , 4 一键完成任务 , 5 一键领取奖励
  uint32 tagretId = 2; // 完成任务/领取奖励配置id
}

message ActRspTaskPlan{
  uint32 operType = 1; // 1 拉取, 2 完成任务, 3领取奖励 , 4 一键完成任务 , 5 一键领取奖励
  uint32 exp = 2;
  bool extraUnlock = 3;
  repeated model.ActDataTaskPlanAwardItem awardInfo = 4; // 奖励领取数据
  repeated ActTaskPlanQuest questInfo = 5; // 任务数据
}

enum SevenDaySignReqType {
  SDSR_GET_INFO = 0;   //拉数据
  SDSR_SIGN = 1;       //签到
}

message ActReqSevenDaySign {
  SevenDaySignReqType cmd = 1;
}

message ActRspSevenDaySign {
  model.ActDataSevenDaySign data = 1;
}

message ActReqSuperRechargeGift {
}

message ActRspSuperRechargeGift {
  model.ActDataSuperRechargeGift data = 1;
}

enum ETimeLimitedTaskOperaType {
    ETLTOY_Invalid = 0;
    ETLTOY_Get = 1;         // 拉取数据
    ETLTOY_TakeReward = 2;  // 领取奖励
}

message ActReqTimeLimitedTask {
    ETimeLimitedTaskOperaType operaType = 1;
    uint32  cfgId = 2;                 // 领取奖励的id 不用从0开始
}

message TimeLimitedTaskItemInfo {
  uint32 cfgId = 1;   // 对应ActTimeLimitTaskQuest中的ID
  uint32 num = 2;     // 该任务进度
  bool hasGot = 3;
}

message ActRspTimeLimitedTask {
  repeated TimeLimitedTaskItemInfo data = 1; // 奖励领取情况
  uint32 score = 2;
}

//每日任务
enum DailyTaskReqType {
  DTRT_Info = 0;   //拉数据
  DTRT_Reward = 1; //领奖
}

message TaskItemInfo {
  uint32 Id = 1; // 任务id
  uint64 num = 2; // 任务进度
  bool hasGot = 3; // 是否领奖
}

message ActReqDailyTask {
  DailyTaskReqType cmd = 1;
  uint32 taskId = 2;
}

message ActRspDailyTask {
  repeated TaskItemInfo data = 1; // 任务信息
}

//全民返利
enum GlobalRebateReqType {
  GRRT_Info = 0; //拉数据
  GRRT_GlobalReward = 1; //全服领奖
  GRRT_PersonReward = 2; //个人领奖
}

message ActReqGlobalRebate {
  GlobalRebateReqType cmd = 1;
  uint32 taskId = 2; // 领取的任务id
}

message ActRspGlobalRebate {
  model.ActDataGlobalRebate data = 1;
  map<uint32, uint64> globalNumCond = 2; //全服充值人数 <day, num>
  map<uint32, uint32> personNumCond = 3; //个人充值笔数 <day, num>
  uint32 curDay = 4; //当前天数
}

// 触发礼包
enum TriggerGiftReqType {
  TGRT_Info = 0;
  TGRT_Trigger = 1; //触发
}

message ActReqTriggerGift {
  TriggerGiftReqType cmd = 1;
  uint32 giftId = 2; // 触发的礼包id
}

message ActRspTriggerGift {
  model.ActDataTriggerGift data = 1;
  bool triggered = 2; // 是否触发成功（不满足触发条件时，返回false，柔性处理，避免提示错误）
}

//基金投资
enum FoundationInvestReqType {
  FGRT_Info = 0;
  FGRT_Reward = 1; //领奖
}

message ActReqFoundationInvest {
  FoundationInvestReqType cmd = 1;
  uint32 taskId = 2; // 领取的任务id
}

message ActRspFoundationInvest {
  model.ActDataFoundationInvest data = 1;
}

//兑换码礼包
message ActReqExchangeCodeGift {
  string code = 1;
}

message ActRspExchangeCodeGift {
  //model.ActDataExchangeCodeGift data = 1;
}

message C2SActivityOpera {
  uint32 uiId = 1;
  model.EActivityType actType = 2; // 活动类型
  oneof ActReq {
    ActReqPersonalCharge reqPersonalCharge = 11; // 个人累充
    ActReqGlobalCharge reqGlobalCharge = 12; // 全服累充
    ActReqLevelUpgrade reqLevelUpgrade = 13; // 冲级活动
    ActReqTaskPlan reqTaskPlan = 14; // 战令
    ActReqSevenDaySign reqSevenDaySign = 15; //七日签到
    ActReqSuperRechargeGift reqSuperRechargeGift = 16; //超值充值礼包
    ActReqTimeLimitedTask reqTimeLimitedTask = 17; //限时任务
    ActReqDailyTask reqDailyTask = 18; //每日签到
    ActReqGlobalRebate reqGlobalRebate = 19; //全民返利
    ActReqTriggerGift reqTriggerGift = 20; //触发礼包
    ActReqFoundationInvest reqFoundationInvest = 21; //基金投资
    ActReqExchangeCodeGift reqExchangeCodeGift = 22; //兑换码礼包
  }
}

message S2CActivityOpera {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  model.EActivityType actType = 3; // 活动类型
  oneof ActRsp {
    ActRspPersonalCharge rspPersonalCharge = 11; // 个人累充
    ActRspGlobalCharge rspGlobalCharge = 12; // 全服累充
    ActRspLevelUpgrade rspLevelUpgrade = 13; // 冲级活动
    ActRspTaskPlan rspTaskPlan = 14; // 战令
    ActRspSevenDaySign rspSevenDaySign = 15; //七日签到
    ActRspSuperRechargeGift rspSuperRechargeGift = 16; //超值充值礼包
    ActRspTimeLimitedTask rspTimeLimitedTask = 17; // 限时任务
    ActRspDailyTask rspDailyTask = 18; //每日签到
    ActRspGlobalRebate rspGlobalRebate = 19; //全民返利
    ActRspTriggerGift rspTriggerGift = 20; //触发礼包
    ActRspFoundationInvest rspFoundationInvest = 21; //基金投资
    ActRspExchangeCodeGift rspExchangeCodeGift = 22; //兑换码礼包
  }
}
/* -------------------- 活动结束 --------------------*/


message TaskActivityGetReq {

}

message TaskActivityRewardReq {
  uint32 taskId = 1;  // taskId为0的时候代表是一键领取
}

message C2STaskActivity {
  uint32 uiId = 1;
  oneof OperaValue {
    TaskActivityGetReq taskActivityGetReq = 2;
    TaskActivityRewardReq taskActivityRewardReq = 3;
  }
}

message TaskActivityGetRsp {

}

message TaskActivityRewardRsp {
  uint32 taskId = 1;  // taskId为0的时候代表是一键领取
}

message S2CTaskActivity {
  uint32 uiId = 1;
  oneof OperaValue {
    TaskActivityGetRsp taskActivityGetRsp = 2;
    TaskActivityRewardRsp taskActivityRewardRsp = 3;
  }
}

// 月卡领奖
message C2SMonthSupply {
  uint32 uiId = 1;
  uint32 operType = 2; // 1 当日领奖
}

message S2CMonthSupply {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  uint32 supplyGetRewardTime = 3; // 领奖时间
}

// 拉取活动配置
message C2SFetchActCfg {
  uint32 uiId = 1;
}

message S2CFetchActCfg {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  repeated model.ActivityCfg actCfgList = 3;
  repeated model.ActTimeSection actTimeList = 4;
}

// 排行榜
enum RankType {
  RankTypeInvalid = 0;
  RankTypeGlobalCharge = 1; // 全服累充
  RankTypeComfort = 2; //舒适度
}

message RankInfo {
  uint32 rank = 1; // 排名
  string uid = 2; // 玩家uid
  uint32 score = 3; // 值
}

message C2SRankOpera {
  uint32 uiId = 1;
  RankType rankType = 2;
  uint32 rankStart = 3; // 排名开始
  uint32 rankEnd = 4; // 排名结束
  bool lastRank = 5; // 上一周期榜单
}

message S2CRankOpera {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  RankType rankType = 3;
  repeated RankInfo rankInfoList = 4;
  RankInfo selfRankInfo = 5; // 自己排名信息
  uint32 totalCount = 6; //榜单总数量
}

enum ENotifyDataType {
  ENDT_FirstChargeTime = 0;
  ENDT_MonthSupplyTime = 1;
}

message NotifyUserDataChange {
  string uid = 1; // 玩家uid
  ENotifyDataType notifyType = 2;
  int64 value1 = 3;
  int64 value2 = 4;
}

message OpenOperaReq{
  repeated model.ItemInfo itemInfo = 1;
}

message C2SOpenBoxReq{
  uint32 uid = 1;
  oneof Opera {
    OpenOperaReq openOperaReq = 2;
  }
}

message OpenOperaRsp{
  repeated ItemChangeInfo itemChangeInfo = 3;
  repeated model.ItemInfo itemList = 4;              // 用于组装common reward
  repeated model.PetInfo petInfoList = 5;      // 用于组装common reward
}

message S2COpenBoxRsp {
  uint32 uiId = 1;
  msg.STATUS errCode = 2;
  oneof Opera {
    OpenOperaRsp openOperaRsp = 3;
  }
}

message BlueVipGetReq{

}

message BlueVipGetRsp{
  model.BlueVip blueVip = 1;
}

message BlueVipRewardReq{
  uint32 rewardId = 1;    // 配置里的id
  uint32 rewardAll = 2;   // 一键领取每日奖励
}

message C2SBlueVipReq{
  uint32 uid = 1;
  oneof Opera {
    BlueVipGetReq blueVipGetReq = 2;
    BlueVipRewardReq blueVipRewardReq = 3;
  }
}

message S2CBlueVipRsp {
  uint32 uiId = 1;
  msg.STATUS errCode = 2;
  oneof Opera {
    BlueVipGetRsp blueVipGetRsp = 3;
  }
}

message QQHallGiftGetReq{

}

message QQHallGiftGetRsp{
  model.QQHallGift giftData = 1;
}

message QQHallGiftRewardReq{
  uint32 rewardId = 1;    // 配置里的id
}

message C2SQQHallGiftReq{
  uint32 uid = 1;
  oneof Opera {
    QQHallGiftGetReq getReq = 2;
    QQHallGiftRewardReq rewardReq = 3;
  }
}

message S2CQQHallGiftRsp {
  uint32 uiId = 1;
  msg.STATUS errCode = 2;
  oneof Opera {
    QQHallGiftGetRsp GetRsp = 3;
  }
}

enum EmailReqType {
  EMAIL_GET_INFO = 0;   //拉数据
  EMAIL_READ = 1;       //读邮件
  EMIIL_GET_AWARD = 2;  //领奖
  EMAIL_DELETE = 3;      //删除
}

message C2SEmailReq {
  uint32 uiId = 1;
  EmailReqType type = 2;
  uint64 mailId = 3;//传0是一键（拉数据除外）
}

message S2CEmailRsp {
  uint32 uiId = 1;
  msg.STATUS errCode = 2;
  repeated model.EmailInfo emailList = 3;
}

message NotifyNewEmail {
  uint32 UserLvl = 1; //玩家等级条件(大于等于，0不限制)
}

message C2SUserInfoReq {
  uint32 uiId = 1;
  repeated string uids = 2;
}

message UserBriefInfo {
  string uid = 1;
  string nickName = 2;
  uint32 sex = 3;
  uint32 headFrame = 4;
}

message S2CUserInfoRsp {
  uint32 uiId = 1;
  msg.STATUS errCode = 2;
  repeated UserBriefInfo briefInfos = 3;
}

message Extra {
  S2CItemInfo S2CItemInfo = 1;
  S2CCommonReward S2CCommonReward = 2;
  UserClientContext  UserClientContext = 3;
  S2CTask S2CTask = 4;
  S2CPetAssign S2CPetAssign = 5;
}

message S2CEventStatsChange {
  repeated uint32 statsIdList = 1;
  repeated model.EActivityType actChgList = 2;
}

message C2STetrisStart {
  uint32 uiId = 1;
}

message S2CTetrisStart {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  model.TetrisInfo info = 3;
}

enum TetrisOpeType {
  TETRIS_OT_INVALID = 0;
  TETRIS_OT_CLEAR = 1; //消除
  TETRIS_OT_PAUSE = 2; //暂停
  TETRIS_OT_RESUME = 3; //恢复
}

message TetrisOpeClearReq {
  uint32 rows = 1; //消除行数
}

message TetrisOpeClearRsp {
  uint32 lvl = 1; //当前难度等级
  uint32 rows = 2; //当前消除行数
  uint32 score = 3; //当前消除得分
  uint32 totalRows = 4; //总消除行数
  uint32 totalScore = 5; //总消除得分
}

message C2STetrisOpe {
  uint32 uiId = 1;
  TetrisOpeType opeType = 2;
  oneof opeVal {
    TetrisOpeClearReq clear = 10;
  }
}

message S2CTetrisOpe {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  TetrisOpeType opeType = 3;
  oneof opeVal {
    TetrisOpeClearRsp clear = 10;
  }
}

message C2STetrisAbort {
  uint32 uiId = 1;
}

message S2CTetrisAbort {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
}

message C2STetrisOver {
  uint32 uiId = 1;
}

message S2CTetrisOver {
  msg.STATUS errCode = 1;
  uint32 uiId = 2;
  uint32 rows = 3; //消除行数
  uint32 score = 4; //总分数
  repeated model.ItemInfo reward = 5; //奖励
}